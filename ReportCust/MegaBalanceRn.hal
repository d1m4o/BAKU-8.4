//server-only
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external procedure GetFindCustBalance(string,LongInt,var val,var val,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,Boolean,var Boolean);
//external procedure PrintStockStat1(array val,array val,array val,integer);
external procedure PrintStockStat1(integer,date,date,string,array string,var val);
//external procedure PrintStockIn2(array val,array val,array val,integer);
external procedure PrintStockIn2(integer,date,date,string,array string);
//external procedure PrintStockCLOut31(val,val,val,val,integer);
external procedure PrintStockCLOut31(integer,date,date,string,array string);
external procedure PrintCashIn412(integer,date,date,string,array string,var val);
external procedure PrintCashIn46(integer,date,date,string,array string,var val);

external procedure PrintCLIn43(integer,date,date,string,array string);

external procedure PrintCUDEb445(date,date,string,integer,array string,var val);

external procedure PrintCLIn5(integer,date,date,string,array string,var val);
external procedure PrintCLOut61(integer,date,date,string,array string);

external procedure PrintStockSelRet468(integer,date,date,string,array string,var val);
//external procedure PrintStockRet46(array val,array val,array val,integer);
//external procedure PrintStockSel47(array val,array val,array val,integer);
external procedure PrintStockVEPAy6(date,date,integer,array string);
//external procedure PrintStockVECred7(date,array val,array val,array val,array val,array val,array val,array val,array val,integer,var val);
external procedure PrintStockFromBrandManag7(record RcVc,array string,var val);
//external procedure PrintStockIVDeb8(date,vector val,vector val,vector val,vector val,vector val,vector val,vector val,vector val,vector val,vector val,integer,var val);
external procedure PrintStockIVDeb8(date,string,array string,var val);

//external procedure PrintStockRetFob9(integer,date,date,string,array string);
external procedure PrintStockRetFob9New(integer,date,date,string,array string);
external procedure PrintRates10(date);
external procedure PrintStockSD32(integer,date,date,string,array string);

SetLangMode(LangRussian,"RUS",0);

global procedure MegaBalanceRn(record RcVc RepSpec)
begin
array string 100 aBrands;
//array val aBrandsBalEUR;
//array val aBrandsBalCHF;
//array val aBrandsBalUSD;
//val BrandsBalUSDtotal;

array val aBrandsPUEUR;
array val aBrandsPUCHF;
array val aBrandsPUUSD;
array val aBrandsPUGBP;
val BrandsPUUSDtotal;

/*array val aBrandsCashEUR;
array val aBrandsCashAZN;
array val aBrandsCashUSD;
array val aBrandsCashGBP;
array val aBrandsCashCHF;
val BrandsCashUSDtotal;
array val aBrandsCCAZN;
array val aBrandsCCUSD;
array val aBrandsCCGBP;
val BrandsCCUSDtotal;
array val aBrandPercent;*/

val BrandsCLOutAZN;
val BrandsCLOutEUR;
val BrandsCLOutCHF;
val BrandsCLOutUSD;
val BrandsCLOutGBP;
val BrandsRetCLOutUSDtotal;

vector val vCUIVAZN;
vector val vCUIVEUR;
vector val vCUIVCHF;
vector val vCUIVUSD;
vector val vCUIVGBP;

vector val vCUIPAZN;
vector val vCUIPEUR;
vector val vCUIPCHF;
vector val vCUIPUSD;
vector val vCUIPGBP;

array val aVEVIAZN;
array val aVEVIEUR;
array val aVEVICHF;
array val aVEVIUSD;
array val aVEVIGBP;

array val aVEOPAZN;
array val aVEOPEUR;
array val aVEOPCHF;
array val aVEOPUSD;
array val aVEOPGBP;

val CUIVTotalUSD;
val VEVITotalUSD;

val CUDebSum,CUPrepaySum;
val VEDebSum,VEPrepaySum;

val rateUSD,rateEUR,rateAZN,rateCHF;

integer brandscnt;
record DIVc DIr;
boolean testf,TrHs;
integer i,j,br,sign,keyi,mtrw;	
record INVc INr;
record ItemHistVc IHr;
string 20 incurncy,keystr;
date curdate;
val t,fr,to1,to2,br1,br2;
string 50 location;
record IVVc IVr;
row IVVc IVrw;
record CLOutVc CLoutr;
record OPrsVc OPrsr;
record IPrsVc IPrsr;
record IPVc IPr;
row IPVc IPrw;
record CUVc CUr;
record OPVc OPr;
row OPVc OPrw;
record ARVc ARr;
val sum,sum2,rval,sumbooked,sumnow,sumincur,sumdiff;
record SMVc CurTotalsr;
Array string 10 debaccs;
Array val debbal;
Integer debcnt;
record VIVc VIr;
row VIVc VIrw;
record ORVc ORr;
val turn,limit,due,balp,onacc;
Date sd,ed;
record CSVc CSr;
string 255 dealer,tstr;
record MailSettingsBlock MBr;
record CUVc InvoiceToCUr;
record CreditLimitBlock CreditLimitRec;
LongInt limitdays;
Boolean limitdaysf;
Boolean TrHs1;
val totusd;
record MegaBalanceBlock MBb;
row MegaBalanceBlock MBrw;
val sumusd;
	
	blockload(MBb);

	sd = RepSpec.sStartDate;
	ed = RepSpec.sEndDate;
	brandscnt = 0;
	mtrw = matrowcnt(MBb);
	For(i=0;i<mtrw;i=i+1) begin
	  matrowget(MBb,i,MBrw);
	  if(nonblank(MBrw.Brand))then begin
	  	aBrands[brandscnt] = MBrw.Brand;
			brandscnt = brandscnt + 1;
	  end;
	end; 
	
	location = RepSpec.f1;
	
	startreportnoheaderjob("Баланс");
	
		startformat(15);
			outstring(0,0,"",false);
			outstring(0,0,"Баланс " & RepSpec.sStartDate & " - " & RepSpec.sEndDate,false);
			outstring(100,0,"Всего",false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrands[i],false);
			end; 
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(0,0,"Статья баланса",false);
		endformat;
					
		
		For(i=0;i<brandscnt;i=i+1) begin			
			aVEVIAZN[i] = 0;
			aVEVIUSD[i] = 0;
			aVEVIEUR[i] = 0;
			aVEVICHF[i] = 0;
			aVEVIGBP[i] = 0;
			
			aVEOPAZN[i] = 0;
			aVEOPUSD[i] = 0;
			aVEOPEUR[i] = 0;
			aVEOPCHF[i] = 0;
			aVEOPGBP[i] = 0;
		end;

		
			
		
		BlockLoad(CreditLimitRec);
	  CUr.Code = "";
		while(loopmain(CUr,1,true))begin
			IPrsr.CustCode = CUr.Code;
			IPrsr.CustDate = "";
			TrHs = true;
			while(loopmain(IPrsr,2,TrHs))begin
				if(IPrsr.CustCode!=CUr.Code)then begin TrHs = false; end;
				if(IPrsr.CustDate>ed)then begin TrHs = false; end;
				
				if(TrHs)then begin
					switch(IPrsr.TransType)begin
						case 0:	IVr.SerNr = IPrsr.TransNr;
										if(readfirstmain(IVr,1,true)) begin
											testf = true;
											if(nonblank(location) and location!=IVr.Location)then begin testf = false; end;
											
											if(testf)then begin
												switch(IVr.CurncyCode)begin
													case"AZN":vCUIVAZN["tot"] = vCUIVAZN["tot"] + IVr.Sum4;
													case"EUR":vCUIVEUR["tot"] = vCUIVEUR["tot"] + IVr.Sum4;
													case"CHF":vCUIVCHF["tot"] = vCUIVCHF["tot"] + IVr.Sum4;
													case"USD":vCUIVUSD["tot"] = vCUIVUSD["tot"] + IVr.Sum4;
													case"GBP":vCUIVGBP["tot"] = vCUIVGBP["tot"] + IVr.Sum4;
												end;
                        mtrw = matrowcnt(IVr);
                        For(i=0;i<mtrw;i=i+1) begin
                          matrowget(IVr,i,IVrw);
                          if (IVrw.stp==kInvoiceRowTypeNormal) then begin
                            INr.Code = IVrw.ArtCode;
                            readfirstmain(INr,1,true);
                            For(j=0;j<brandscnt;j=j+1) begin
                              if (SetInSet(aBrands[j],INr.DispGroups)) then begin
                                switch(IVr.CurncyCode)begin
                                  case"AZN":vCUIVAZN[j & ""] = vCUIVAZN[j & ""] + IVrw.Sum;
                                  case"EUR":vCUIVEUR[j & ""] = vCUIVEUR[j & ""] + IVrw.Sum;
                                  case"CHF":vCUIVCHF[j & ""] = vCUIVCHF[j & ""] + IVrw.Sum;
                                  case"USD":vCUIVUSD[j & ""] = vCUIVUSD[j & ""] + IVrw.Sum;
                                  case"GBP":vCUIVGBP[j & ""] = vCUIVGBP[j & ""] + IVrw.Sum;
                                end;
                                j = brandscnt;
                              end;
                            end;
                          end;
                        end;
												if(IVr.InvType==kInvoiceTypeCredit)then begin
													switch(IVr.CurncyCode)begin
														case"AZN":vCUIVAZN["tot"] = vCUIVAZN["tot"] - IVr.Sum4;
														case"EUR":vCUIVEUR["tot"] = vCUIVEUR["tot"] - IVr.Sum4;
														case"CHF":vCUIVCHF["tot"] = vCUIVCHF["tot"] - IVr.Sum4;
														case"USD":vCUIVUSD["tot"] = vCUIVUSD["tot"] - IVr.Sum4;
														case"GBP":vCUIVGBP["tot"] = vCUIVGBP["tot"] - IVr.Sum4;
													end;
                          mtrw = matrowcnt(IVr);
                          For(i=0;i<mtrw;i=i+1) begin
                            matrowget(IVr,i,IVrw);
                            if (IVrw.stp==kInvoiceRowTypeNormal) then begin
                              INr.Code = IVrw.ArtCode;
                              readfirstmain(INr,1,true);
                              For(j=0;j<brandscnt;j=j+1) begin
                                if (SetInSet(aBrands[j],INr.DispGroups)) then begin
                                  switch(IVr.CurncyCode)begin
                                    case"AZN":vCUIVAZN[j & ""] = vCUIVAZN[j & ""] - IVrw.Sum;
                                    case"EUR":vCUIVEUR[j & ""] = vCUIVEUR[j & ""] - IVrw.Sum;
                                    case"CHF":vCUIVCHF[j & ""] = vCUIVCHF[j & ""] - IVrw.Sum;
                                    case"USD":vCUIVUSD[j & ""] = vCUIVUSD[j & ""] - IVrw.Sum;
                                    case"GBP":vCUIVGBP[j & ""] = vCUIVGBP[j & ""] - IVrw.Sum;
                                  end;
                                  j = brandscnt;
                                end;
                              end;
                            end;
                          end;
												end;
												if(IVr.InvType==kInvoiceTypeCash)then begin
													switch(IVr.CurncyCode)begin
														case"AZN":vCUIVAZN["tot"] = vCUIVAZN["tot"] - IVr.Sum4;
														case"EUR":vCUIVEUR["tot"] = vCUIVEUR["tot"] - IVr.Sum4;
														case"CHF":vCUIVCHF["tot"] = vCUIVCHF["tot"] - IVr.Sum4;
														case"USD":vCUIVUSD["tot"] = vCUIVUSD["tot"] - IVr.Sum4;
														case"GBP":vCUIVGBP["tot"] = vCUIVGBP["tot"] - IVr.Sum4;
													end;
                          mtrw = matrowcnt(IVr);
                          For(i=0;i<mtrw;i=i+1) begin
                            matrowget(IVr,i,IVrw);
                            if (IVrw.stp==kInvoiceRowTypeNormal) then begin
                              INr.Code = IVrw.ArtCode;
                              readfirstmain(INr,1,true);
                              For(j=0;j<brandscnt;j=j+1) begin
                                if (SetInSet(aBrands[j],INr.DispGroups)) then begin
                                  switch(IVr.CurncyCode)begin
                                    case"AZN":vCUIVAZN[j & ""] = vCUIVAZN[j & ""] - IVrw.Sum;
                                    case"EUR":vCUIVEUR[j & ""] = vCUIVEUR[j & ""] - IVrw.Sum;
                                    case"CHF":vCUIVCHF[j & ""] = vCUIVCHF[j & ""] - IVrw.Sum;
                                    case"USD":vCUIVUSD[j & ""] = vCUIVUSD[j & ""] - IVrw.Sum;
                                    case"GBP":vCUIVGBP[j & ""] = vCUIVGBP[j & ""] - IVrw.Sum;
                                  end;
                                  j = brandscnt;
                                end;
                              end;
                            end;
                          end;
												end;
												CUDebSum = 0;
												if(IVr.InvType==kInvoiceTypeNormal)then begin
													mtrw = matrowcnt(IVr);
													For(i=0;i<mtrw;i=i+1) begin
														matrowget(IVr,i,IVrw);
														if(IVrw.stp==kInvoiceRowTypeCashPayment)then begin
															GetFullCurncyRate(IVrw.CurncyCode,IVr.TransDate,fr,to1,to2,br1,br2);
															if(fr==0 or to1==0)then begin
																fr = 1;
																to1 =1;
															end;
															if(IVr.FrRate!=0)then begin
																CUDebSum = CUDebSum + IVrw.Sum*fr/to1*IVr.ToRateB1/IVr.FrRate;
															end else begin
																CUDebSum = CUDebSum + IVrw.Sum*fr/to1;
															end;
														end;
														if(IVrw.stp==kInvoiceRowTypeCreditCardPayment)then begin
															if(IVr.FrRate!=0)then begin
																CUDebSum = CUDebSum + IVrw.Sum*IVr.ToRateB1/IVr.FrRate;
															end else begin
																CUDebSum = CUDebSum + IVrw.Sum;
															end;
														end;
														if(IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)then begin
															if(IVr.FrRate!=0)then begin
																CUDebSum = CUDebSum + IVrw.Sum*IVr.ToRateB1/IVr.FrRate;
															end else begin
																CUDebSum = CUDebSum + IVrw.Sum;
															end;
														end; 													
													end; 
													switch(IVr.CurncyCode)begin
														case"AZN":vCUIVAZN["tot"] = vCUIVAZN["tot"] - CUDebSum;
														case"EUR":vCUIVEUR["tot"] = vCUIVEUR["tot"] - CUDebSum;
														case"CHF":vCUIVCHF["tot"] = vCUIVCHF["tot"] - CUDebSum;
														case"USD":vCUIVUSD["tot"] = vCUIVUSD["tot"] - CUDebSum;
														case"GBP":vCUIVGBP["tot"] = vCUIVGBP["tot"] - CUDebSum;
													end;
                          mtrw = matrowcnt(IVr);
                          For(i=0;i<mtrw;i=i+1) begin
                            matrowget(IVr,i,IVrw);
                            if (IVrw.stp==kInvoiceRowTypeNormal) then begin
                              INr.Code = IVrw.ArtCode;
                              readfirstmain(INr,1,true);
                              For(j=0;j<brandscnt;j=j+1) begin
                                if (SetInSet(aBrands[j],INr.DispGroups)) then begin
                                  switch(IVr.CurncyCode)begin
                                    case"AZN":vCUIVAZN[j & ""] = vCUIVAZN[j & ""] - CUDebSum*IVrw.Sum/IVr.Sum4;
                                    case"EUR":vCUIVEUR[j & ""] = vCUIVEUR[j & ""] - CUDebSum*IVrw.Sum/IVr.Sum4;
                                    case"CHF":vCUIVCHF[j & ""] = vCUIVCHF[j & ""] - CUDebSum*IVrw.Sum/IVr.Sum4;
                                    case"USD":vCUIVUSD[j & ""] = vCUIVUSD[j & ""] - CUDebSum*IVrw.Sum/IVr.Sum4;
                                    case"GBP":vCUIVGBP[j & ""] = vCUIVGBP[j & ""] - CUDebSum*IVrw.Sum/IVr.Sum4;
                                  end;
                                  j = brandscnt;
                                end;
                              end;
                            end;
                          end;
												end;
											end;
										end;
						case 1: IPr.SerNr = IPrsr.TransNr;
										if(readfirstmain(IPr,1,true))then begin
											mtrw = matrowcnt(IPr);
											For(i=0;i<mtrw;i=i+1) begin
												matrowget(IPr,i,IPrw);
												if(IPrw.CustCode==CUr.Code)then begin
													if(IPrsr.IVNr>0 and IPrw.InvoiceNr==IPrsr.IVNr)then begin
														testf = true;
														IVr.SerNr = IPrw.InvoiceNr;
														if(readfirstmain(IVr,1,true))then begin 
															if(nonblank(location) and location!=IVr.Location)then begin testf = false; end;
														end;
														
														if(testf)then begin
															switch(IPrw.InvCurncy)begin
																case"AZN":vCUIPAZN["tot"] = vCUIPAZN["tot"] + IPrw.InvVal;
																case"EUR":vCUIPEUR["tot"] = vCUIPEUR["tot"] + IPrw.InvVal;
																case"CHF":vCUIPCHF["tot"] = vCUIPCHF["tot"] + IPrw.InvVal;
																case"USD":vCUIPUSD["tot"] = vCUIPUSD["tot"] + IPrw.InvVal;
																case"GBP":vCUIPGBP["tot"] = vCUIPGBP["tot"] + IPrw.InvVal;
															end;
                              mtrw = matrowcnt(IVr);
                              For(i=0;i<mtrw;i=i+1) begin
                                matrowget(IVr,i,IVrw);
                                if (IVrw.stp==kInvoiceRowTypeNormal) then begin
                                  INr.Code = IVrw.ArtCode;
                                  readfirstmain(INr,1,true);
                                  For(j=0;j<brandscnt;j=j+1) begin
                                    if (SetInSet(aBrands[j],INr.DispGroups)) then begin
                                      switch(IVr.CurncyCode)begin
                                        case"AZN":vCUIPAZN[j & ""] = vCUIPAZN[j & ""] + IPrw.InvVal;
                                        case"EUR":vCUIPEUR[j & ""] = vCUIPEUR[j & ""] + IPrw.InvVal;
                                        case"CHF":vCUIPCHF[j & ""] = vCUIPCHF[j & ""] + IPrw.InvVal;
                                        case"USD":vCUIPUSD[j & ""] = vCUIPUSD[j & ""] + IPrw.InvVal;
                                        case"GBP":vCUIPGBP[j & ""] = vCUIPGBP[j & ""] + IPrw.InvVal;
                                      end;
                                      j = brandscnt;
                                    end;
                                  end;
                                end;
                              end;
														end;
													end;
													if(IPrsr.IVNr<0 and IPrw.InvoiceNr<0)then begin
														testf = true;
														ORr.SerNr = IPrw.OrderNr;
														if(readfirstmain(ORr,1,true))then begin
															if(nonblank(location) and location!=ORr.Location)then begin testf = false; end;
														end;
														if(testf)then begin
															switch(IPrw.RecCurncy)begin
																case"AZN":vCUIPAZN["tot"] = vCUIPAZN["tot"] + IPrw.RecVal;
																case"EUR":vCUIPEUR["tot"] = vCUIPEUR["tot"] + IPrw.RecVal;
																case"CHF":vCUIPCHF["tot"] = vCUIPCHF["tot"] + IPrw.RecVal;
																case"USD":vCUIPUSD["tot"] = vCUIPUSD["tot"] + IPrw.RecVal;
																case"GBP":vCUIPGBP["tot"] = vCUIPGBP["tot"] + IPrw.RecVal;
															end;
                              mtrw = matrowcnt(IVr);
                              For(i=0;i<mtrw;i=i+1) begin
                                matrowget(IVr,i,IVrw);
                                if (IVrw.stp==kInvoiceRowTypeNormal) then begin
                                  INr.Code = IVrw.ArtCode;
                                  readfirstmain(INr,1,true);
                                  For(j=0;j<brandscnt;j=j+1) begin
                                    if (SetInSet(aBrands[j],INr.DispGroups)) then begin
                                      switch(IVr.CurncyCode)begin
                                        case"AZN":vCUIPAZN[j & ""] = vCUIPAZN[j & ""] + IPrw.RecVal;
                                        case"EUR":vCUIPEUR[j & ""] = vCUIPEUR[j & ""] + IPrw.RecVal;
                                        case"CHF":vCUIPCHF[j & ""] = vCUIPCHF[j & ""] + IPrw.RecVal;
                                        case"USD":vCUIPUSD[j & ""] = vCUIPUSD[j & ""] + IPrw.RecVal;
                                        case"GBP":vCUIPGBP[j & ""] = vCUIPGBP[j & ""] + IPrw.RecVal;
                                      end;
                                      j = brandscnt;
                                    end;
                                  end;
                                end;
                              end;
														end;
													end;
												end;	  
											end; 
										end;
					end;
				end;
			end;
			resetloop(IPrsr);
			
			TrHs = false;
			OPrsr.VECode = CUr.Code;
			For(i=0;i<brandscnt;i=i+1) begin
				DIr.Code = aBrands[i];
				readfirstmain(DIr,1,true);
	  		if(CUr.Name==DIr.Name)then begin
	  			br = i;
	  			TrHs = true;
	  		end;
			end; 
			while(loopmain(OPrsr,1,TrHs))begin
				if(OPrsr.VECode!=CUr.Code)then begin TrHs = false; end;
				if(OPrsr.TransDate>ed)then begin TrHs = false; end;
				
				if(TrHs)then begin	
					switch(OPrsr.TransType)begin
						case 0:	VIr.SerNr = OPrsr.TransNr;
										if(readfirstmain(VIr,1,true)) begin
											switch(VIr.CurncyCode)begin
												case"AZN":aVEVIAZN[br] = aVEVIAZN[br] + VIr.PayVal;
												case"EUR":aVEVIEUR[br] = aVEVIEUR[br] + VIr.PayVal;
												case"CHF":aVEVICHF[br] = aVEVICHF[br] + VIr.PayVal;
												case"USD":aVEVIUSD[br] = aVEVIUSD[br] + VIr.PayVal;
												case"GBP":aVEVIGBP[br] = aVEVIGBP[br] + VIr.PayVal;
											end;
											if(VIr.InvType==kInvoiceTypeCredit)then begin
												switch(VIr.CurncyCode)begin
													case"AZN":aVEVIAZN[br] = aVEVIAZN[br] - VIr.PayVal;
													case"EUR":aVEVIEUR[br] = aVEVIEUR[br] - VIr.PayVal;
													case"CHF":aVEVICHF[br] = aVEVICHF[br] - VIr.PayVal;
													case"USD":aVEVIUSD[br] = aVEVIUSD[br] - VIr.PayVal;
													case"GBP":aVEVIGBP[br] = aVEVIGBP[br] - VIr.PayVal;
												end;
											end;
										end;
						case 1: OPr.SerNr = OPrsr.TransNr;
										if(readfirstmain(OPr,1,true))then begin
											mtrw = matrowcnt(OPr);
											For(i=0;i<mtrw;i=i+1) begin
												matrowget(OPr,i,OPrw);
												if(OPrw.VECode==CUr.Code)then begin
													if(OPrsr.VINr>0 and OPrw.VISerNr==OPrsr.VINr)then begin
														switch(OPrw.PInvCurncy)begin
															case"AZN":aVEOPAZN[br] = aVEOPAZN[br] + OPrw.PInvVal;
															case"EUR":aVEOPEUR[br] = aVEOPEUR[br] + OPrw.PInvVal;
															case"CHF":aVEOPCHF[br] = aVEOPCHF[br] + OPrw.PInvVal;
															case"USD":aVEOPUSD[br] = aVEOPUSD[br] + OPrw.PInvVal;
															case"GBP":aVEOPGBP[br] = aVEOPGBP[br] + OPrw.PInvVal;
														end;
													end;
													if(OPrsr.VINr<0 and OPrw.VISerNr<0)then begin
														switch(OPrw.RecCurncy)begin
															case"AZN":aVEOPAZN[br] = aVEOPAZN[br] + OPrw.RecVal;
															case"EUR":aVEOPEUR[br] = aVEOPEUR[br] + OPrw.RecVal;
															case"CHF":aVEOPCHF[br] = aVEOPCHF[br] + OPrw.RecVal;
															case"USD":aVEOPUSD[br] = aVEOPUSD[br] + OPrw.RecVal;
															case"GBP":aVEOPGBP[br] = aVEOPGBP[br] + OPrw.RecVal;
														end;
													end;
												end;	  
											end; 
										end;
					end;
				end;
			end;
			resetloop(OPrsr);
		end;
		
		PrintStockStat1(brandscnt,sd,ed,location,aBrands,totusd);
		//PrintStockStat1(aBrandsBalEUR,aBrandsBalCHF,aBrandsBalUSD,brandscnt);
		PrintStockIn2(brandscnt,sd,ed,location,aBrands);
		//PrintStockIn2(aBrandsPUEUR,aBrandsPUCHF,aBrandsPUUSD,brandscnt);
		//PrintStockCLOut31(BrandsCLOutAZN,BrandsCLOutEUR,BrandsCLOutCHF,BrandsCLOutUSD,brandscnt);
		PrintStockCLOut31(brandscnt,sd,ed,location,aBrands);
		//PrintStockSD32(brandscnt,sd,ed,location,aBrands);//*************************************************************Вызов в PrintStockCLOut31
		PrintCashIn412(brandscnt,sd,ed,location,aBrands,sumusd);
		
		//PrintCLIn43(brandscnt,sd,ed,location,aBrands);
		PrintCUDEb445(sd,ed,location,brandscnt,aBrands,sumusd);
		PrintCashIn46(brandscnt,sd,ed,location,aBrands,sumusd);
		
		PrintStockSelRet468(brandscnt,sd,ed,location,aBrands,sumusd);
		PrintCLIn5(brandscnt,sd,ed,location,aBrands,totusd);
		//PrintStockSel47(aBrandsSelEUR,aBrandsSelCHF,aBrandsSelUSD,brandscnt);
		PrintStockVEPAy6(sd,ed,brandscnt,aBrands);
		PrintCLOut61(brandscnt,sd,ed,location,aBrands);

		//PrintStockVECred7(ed,aVEVIAZN,aVEOPAZN,aVEVIEUR,aVEOPEUR,aVEVICHF,aVEOPCHF,aVEVIUSD,aVEOPUSD,brandscnt,totusd);
    PrintStockFromBrandManag7(RepSpec,aBrands,totusd);
		//PrintStockIVDeb8(ed,vCUIVAZN,vCUIPAZN,vCUIVEUR,vCUIPEUR,vCUIVCHF,vCUIPCHF,vCUIVUSD,vCUIPUSD,vCUIVGBP,vCUIPGBP,brandscnt,totusd);
    PrintStockIVDeb8(ed,RepSpec.f1,aBrands,totusd);
		PrintStockRetFob9New(brandscnt,sd,ed,location,aBrands);
		startformat(15);
			outstring(0,0,"10",false);
			outstring(50,0,"АКТИВ",false);
			outstring(150,0,totusd,false);
		endformat;
		
		PrintRates10(ed);
		
				
			
	endjob;
	
	
return;
end;