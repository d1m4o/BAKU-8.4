external procedure HTItem(string,var string);
external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean SetInSet2(string,string);
external procedure HTLocationClassification(string,string,var string);
external procedure HTLocationGroup(string,string,var string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HTDetailLevel(Integer, var string);
external procedure HTCusts(string, string, var string);
external procedure HTOKF(Integer, Integer, var string); 
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);
external procedure HT2Per(Date, Date , var string);
external procedure LogProcTime(string,longint);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);

SetLangMode(LangRussian,"RUS",0);

procedure RepShip(record RcVc RepSpec,record SHVc SHp,var val ordtot,var val shptot)
begin
  Integer i,rwcnt;
  row SHVc SHrw;
  Boolean testf;
  string 20 frit,toit;
  string 20 frin,toin;
  record INVc INr;
  string 255 tstr;
  string 255 itsz,mask,subsets,mskrep;
  
  frit = FirstInRange(RepSpec.Stext,20);
  toit = LastInRange(RepSpec.Stext,20);
  frin = FirstInRange(RepSpec.LastAcc,20);
  toin = LastInRange(RepSpec.LastAcc,20);  
  StartFormat(15);
  OutLongInt(0,"DblSHVc",SHp.SerNr,false);
  OutDate(60,0,SHp.ShipDate,false);
  OutLongInt(130,0,SHp.OrderNr,false);
  OutString(200,0,SHp.CustCode,false);
  OutString(300,0,SHp.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(60,0,SHp.ShipMode,false);
  OutString(300,0,SHp.Addr1,false);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(300,0,SHp.Addr2,false);
  EndFormat;
  StartFormat(15);
  OutString(300,0,SHp.Addr3,false);
  EndFormat;
  rwcnt = MatRowCnt(SHp);
  for (i = 0 ; i<rwcnt ; i=i+1) begin
    MatRowGet(SHp,i,SHrw);
    testf = true;
    if (nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.Stext) or (nonblank(RepSpec.f8))) then begin
      testf = ReadFirstItem(SHrw.ArtCode,INr,false,true);
    end;
    if (testf) then begin 
      if (nonblank(RepSpec.Stext)) then begin
        if (INr.Group<frit) or (INr.Group>toit) then begin 
          testf = false;              
        end; 
      end;
    end;
    if (testf) then begin 
      if (nonblank(RepSpec.LastAcc)) then begin
        if (FindItemVAR(INr.Code,itsz,mask,mskrep,subsets)) then begin
          if (RepSpec.LastAcc!=SHrw.ArtCode) and (RepSpec.LastAcc!=INr.Code) then begin 
            testf = false;              
          end; 
        end else begin
          if (INr.Code<frin) or (INr.Code>toin) then begin 
            testf = false;              
          end; 
        end;
      end;
    end;
    if (testf) then begin 
      if (nonblank(RepSpec.f8)) then begin
        testf = SetInSet2(RepSpec.f8,INr.DispGroups);         
      end;       
    end; 
    if (testf) then begin
      StartFormat(15);
      OutString(20,0,SHrw.ArtCode,false);
      OutString(120,0,SHrw.Spec,false);
      OutString(300,0,SHrw.SerialNr,false);
      OutValBiDi(420,0,SHrw.Ordered,M4UVal,true,460);
      OutValBiDi(480,0,SHrw.Ship,M4UVal,true,520);
      EndFormat;
      ordtot = ordtot + SHrw.Ordered;
      shptot = shptot + SHrw.Ship;
    end;
  end;
  return;
end;





global
procedure CCFinishedSHRn(record RcVc RepSpec)
begin
	record ORVc ORr;
	row ORVc ORrw;
	record SerBalVc SBr;
  record LocationVc Locr;
  Boolean TrHs;
  Boolean testf;
  Integer i,j,k;
  Integer rwcnt, ordcnt, stockcnt;
  array string 255 StockName, OrNo;
	vector boolean Stockf, StockOrdNo;
	vector date Ordate;
	vector integer vItQty, AccumulatedItemsMinus;
	vector string 255 vOrType;
	record ItemStatusVc ISr;
	record CUVc CUr;
	string 255 CompName;
	
	StartReportnoheaderjob("Cписок заказов готовых к отгрузке");
	startformat(15);
		outstring(0,0,"Заказ №",false);
		outstring(70,0,"Магазин",false);
		outstring(220,0,"Дата закзаза",false);
		outstring(300,0,"Кол. тов",false);
		outstring(340,0,"Тип заказа",false);
	endformat;
	
	j = 0;
	k = 0;
	ORr.ShipFlag = 0;
	TrHs = true;
	while (LoopKey("ShipFlag",ORr,1,TrHs)) begin
		testf = true;
		if(ORr.ShipFlag!=0)then begin TrHs = false; testf = false; end;		
		if(testf)then begin
			rwcnt = matrowcnt(ORr);
			for (i=0;i<rwcnt;i=i+1) begin
				matrowget(ORr,i,ORrw);
				SBr.Item = ORrw.ArtCode;
				SBr.Serial = ORr.OrderClass & ORr.SerNr;
				if(ReadFirstKey("ItemSerial",SBr,2,true))then begin
					if(ORrw.Quant>SBr.Quant)then begin testf = false; end;
				end else begin
					ISr.Code = ORrw.ArtCode;
					ISr.Location = ORr.Location;
					if(ReadFirstMain(ISr,2,true))then begin
						if(ISr.Instock>0)then begin
							SBr.Item = ORrw.ArtCode;
							SBr.Location = ORr.Location;
							while (LoopKey("ItemQuant",SBr,2,true)) begin
								ISr.Instock = ISr.Instock - SBr.Quant;
							end;
							resetloop(SBr);
						end;
						if(AccumulatedItemsMinus[ORrw.ArtCode & ORr.Location] > 0)then begin
							ISr.Instock = ISr.Instock - AccumulatedItemsMinus[ORrw.ArtCode & ORr.Location];
						end;
						if(ORrw.Quant>ISr.Instock)then begin 
							testf = false;
						end else begin
							AccumulatedItemsMinus[ORrw.ArtCode & ORr.Location] = AccumulatedItemsMinus[ORrw.ArtCode & ORr.Location] + ORrw.Quant;
						end;
					end else begin
						testf = false;
					end;
				end;
				vItQty[ORr.SerNr] = vItQty[ORr.SerNr] + ORrw.Quant;
			end;
			if(testf)then begin
				if(!Stockf[ORr.CustCode])then begin
					Stockf[ORr.CustCode] = true;
					StockName[j] = ORr.CustCode;
					j=j+1;
				end;
				StockOrdNo[ORr.CustCode & ORr.SerNr] = true;
				OrNo[k] = ORr.SerNr;
				k = k + 1;
				Ordate[ORr.SerNr] = ORr.OrdDate;
				vOrType[ORr.SerNr] = ORr.OrderClass;
			end;
		end;
	end;
	
	ordcnt = k;
	stockcnt = j;
	
	for (j=0;j<stockcnt;j=j+1) begin	
		testf = true;
		if(nonblank(RepSpec.f1) and StockName[j]!=RepSpec.f1)then begin testf = false; end;
		if(testf)then begin
			for (k=0;k<ordcnt;k=k+1) begin
				if(StockOrdNo[StockName[j] & OrNo[k]])then begin
					CUr.Code = StockName[j];
					if(ReadFirstMain(CUr,1,true))then begin 
						CompName = CUr.Name; 
					end else begin 
						CompName = StockName[j]; 
					end;
					startformat(15);
						outstring(0,"DblORVc",OrNo[k],false);
						outstring(70,0,CompName,false);
						outstring(220,0,Ordate[OrNo[k]],false);
						outstring(300,0,vItQty[OrNo[k]],false);
						outstring(340,0,vOrType[OrNo[k]],false);
					endformat;
				end;
			end;
		end;
	end;
	
	
	
	
	
	endjob;
	return;
end;










global
procedure CCPOListRn(record RcVc RepSpec)
begin
	record POVc POr, locPOr;
	row POVc POrw;
	record SerBalVc SBr;
  record LocationVc Locr;
  Boolean TrHs, TrHs2;
  Boolean testf, TrLf, locf;
  Integer i,j,k,intPOSerNr,intPOComp, locORserNr, StatusMargin;
  Integer rwcnt, ordcnt, stockcnt, pos;
  array string 255 StockName, OrNo;
	vector boolean Stockf, StockOrdNo;
	vector date Ordate;
	vector integer vItQty, AccumulatedItemsMinus;
	vector string 255 vOrType;
	record ItemStatusVc ISr;
	record CUVc CUr;
	string 255 CompName, locORrClient,ORrOFFser,POSerNr, POComp, TrackSet;
	record ORVc ORr, locORr;
	record RLinkVc RLr;
	date locORrDate, blnkDate;
	val Weight, Volume, PPSum, PSum, Sum;
	record POShipmDataVc POSDr;
	row POShipmDataVc POSDrw;
	record APPayHistVc APPayHistr;
	record VIVc VIr;
	row VIVc VIrw;
	record APVc APr;
	
	
	StartReportnoheaderjob("Cписок заказов готовых к отгрузке");
	startformat(15);
		outstring(0,0,"Client order #",false);
		outstring(220,0,"Client Order date",false);
		outstring(300,0,"Client number",false);
		outstring(340,0,"Promised date",false);
		outstring(340,0,"Po number",false);
		outstring(340,0,"Po date",false);
		outstring(340,0,"Mfr finish date",false);
		outstring(340,0,"Invoice number",false);
		outstring(340,0,"Invoice date",false);
		outstring(340,0,"Order status",false);
		outstring(340,0,"Order status margin",false);
		outstring(340,0,"Payment terms",false);
		outstring(340,0,"Currency code",false);
		outstring(340,0,"Order amount",false);
		outstring(340,0,"Estimated date of payment",false);
		outstring(340,0,"Payment date",false);
		outstring(340,0,"Payment amount",false);
		outstring(340,0,"Payment margin",false);
		outstring(340,0,"Payment deadline",false);
		outstring(340,0,"Days for balance payment",false);
		outstring(340,0,"Balance payment deadline",false);
		outstring(340,0,"Balance payment amount",false);
		outstring(340,0,"Margin for balance payment",false);
		outstring(340,0,"Reception date",false);
		outstring(340,0,"Freight",false);
		outstring(340,0,"Truck number",false);
		outstring(340,0,"Volume",false);
		outstring(340,0,"Weight",false);
	endformat;
	
	TrHs = true;
	POr.TransDate = "";
	POr.SerNr = "";
	while (LoopKey("TransDate",POr,2,TrHs)) begin
		testf = true;
		// for (i=0;i<matrowcnt(POr);i=i+1) begin
			// matrowget(POr,i,POrw);
			// if(POrw.Shipd2 < POrw.Quant)then begin testf = true; end;
		// end;
		if(nonblank(RepSpec.f1) and POr.SalesMan!=RepSpec.f1)then begin testf = false; end;
		if(nonblank(RepSpec.f2) and POr.IDStatus!=RepSpec.f2)then begin testf = false; end;
		if(RepSpec.sStartDate > POr.TransDate)then begin testf = false; TrHs = false; end;  
		if(RepSpec.sEndDate < POr.TransDate)then begin testf = false; TrHs = false; end;
		locf = false;
		if(POr.POClass=="CLIEN")then begin
			locORserNr = 0;
			locORrDate = blnkDate;
			locORrClient = "";
			ORr.SerNr = POr.OrdNr;
			if(nonblank(POr.OrdNr) and ReadFirstMain(ORr,1,true)) then begin
				ORrOFFser = ORr.OfficialSerNr;
				pos = 0;
				ExtractObjWithSeparator(":",ORrOFFser,true,pos,POSerNr);
				ExtractObjWithSeparator(":",ORrOFFser,true,pos,POComp);
				intPOSerNr = StringToInt(POSerNr);
				intPOComp = StringToInt(POComp);
				if(SetCompany(intPOComp,false))then begin
					locPOr.SerNr = intPOSerNr;
					if(ReadFirstMain(locPOr,1,true))then begin
						locORr.SerNr = locPOr.OrdNr;
						if(ReadFirstMain(locORr,1,true))then begin
							locORserNr = locORr.SerNr;
							locORrDate = locORr.OrdDate;
							locORrClient = locORr.CustCode;
							locf = true;
						end;
					end;
				end;
				resetcompany(33);
			end;
		end;
		if(nonblank(POr.IDStatus))then begin
			StatusMargin = 0;
			switch (POr.IDStatus) begin
				case "PO On Enquiry": StatusMargin = 5;
				case "PO Confirmed": StatusMargin = 2;
				case "PO Goods On Manufacturing": StatusMargin = 1;
				case "PO Goods Ready for Shipment": StatusMargin = 3;
				case "PO Goods Shipped": 
					StatusMargin = 7;
					if(left(POr.IDFreight,3)=="Air")then begin
						StatusMargin = 23;
					end;
			end;
		end;
		Weight = blankval;
		Volume = blankval;
		TrackSet = "";
		POSDr.POSerNr = POr.SerNr;
		TrLf = false;
		if(ReadFirstMain(POSDr,1,true))then begin
			for (i=0;i<matrowcnt(POSDr);i=i+1)begin
				matrowget(POSDr,i,POSDrw);
				if(nonblank(TrackSet))then begin TrackSet = TrackSet & ","; end;
				TrackSet = TrackSet & POSDrw.TruckNo;
				Weight = Weight + POSDrw.Weight;
				Volume = Volume + POSDrw.Volume;
				TrLf = true;
			end;
		end;
		
		PPSum = 0;
		PSum = 0;
		APPayHistr.OrderNr = POr.SerNr;
		TrHs2 = true;
		While(LoopKey("OrderNr",APPayHistr,1,TrHs2)) begin
			if (APPayHistr.OrderNr!=POr.SerNr) then begin TrHs2 = false; end;
			if (TrHs2 and APPayHistr.FileName=="OPVc") then begin
				PPSum = PPSum + APPayHistr.Val;
			end;
		end;
		Resetloop(APPayHistr);
		
		VIr.POSerNr = POr.SerNr;
		TrHs2 = true;
		While(LoopKey("POSerNr",VIr,1,TrHs2)) begin
			if (VIr.POSerNr!=POr.SerNr) then begin TrHs2 = false; end;
			matrowget(VIr,0,VIrw);
			if (matrowcnt(VIr)>0 and TrHs2 and VIrw.AccNumber!="44/21") then begin
				APr.SerNr = VIr.SerNr;
				if(ReadFirstMain(APr,1,true))then begin
					logtext(0,APr.RVal);
					PSum = PSum + (VIr.PayVal - APr.RVal);
				end else begin
					if(VIr.OKFlag==1)then begin
						PSum = VIr.PayVal;
					end;
				end;
			end;
		end;
		Resetloop(VIr);
		
		// if(PSum>0)then begin
			// Sum = PSum;
		// end else begin
			// Sum = PPSum;
		// end;
		Sum = PPSum + PSum;
		if(testf)then begin
			startformat(15);
				if(locf)then begin
					outstring(0,0,locORserNr,false); // Client order #
					outstring(220,0,locORrDate,false); // Client Order date
					outstring(300,0,locORrClient,false); // Client number
				end else begin
					outstring(0,0,"",false); // Client order #
					outstring(220,0,"",false); // Client Order date
					outstring(300,0,"",false); // Client number
				end;
				outstring(340,0,POr.PlanShipDate,false);
				outstring(340,0,POr.SerNr,false);
				outstring(340,0,POr.TransDate,false);
				outstring(340,0,POr.IDMfrFinDate,false);
				outstring(340,0,POr.IDProfInvNum,false);
				outstring(340,0,POr.IDMfrFinConfirmDate,false);
				outstring(340,0,POr.IDStatus,false);
				if(StatusMargin>0)then begin
					outstring(340,0,StatusMargin,false); 
				end else begin
					outstring(340,0,"",false); 
				end;
				outstring(340,0,POr.PayDeal,false);
				outstring(340,0,POr.CurncyCode,false);
				outstring(340,0,POr.Sum4,false);
				outstring(340,0,POr.IDMfrFinDate,false);
				outstring(340,0,POr.IDMfrFinConfirmDate,false);
				outstring(340,0,Sum,false);// Payment amount- должен рассчитаться в зависимости от условия оплаты
				outstring(340,0,AddDay(POr.IDPrepayDate,-1),false);
				outstring(340,0,AddDay(POr.IDMfrFinConfirmDate,3),false);
				outstring(340,0,POr.DaysForBallancePayment,false);// Days for balance payment- цифра из новой ячейки
				outstring(340,0,AddDay(POr.IDMfrFinConfirmDate,POr.DaysForBallancePayment),false);// Balance payment deadline - invoice date+days for balance payment
				outstring(340,0,POr.Sum4-Sum,false);
				outstring(340,0,AddDay(POr.IDMfrFinConfirmDate,POr.DaysForBallancePayment-1),false);//Margin for balance payment- Balance payment deadline- сегодня
				outstring(340,0,ORr.OrdDate,false);// Reception date- дата поступления заказа – откуда эта дата?
				outstring(340,0,POr.IDFreight,false);
				if(TrLf)then begin
					outstring(340,0,TrackSet,false);
					outstring(340,0,Weight,false);
					outstring(340,0,Volume,false);
				end else begin
					outstring(340,0,"",false);
					outstring(340,0,"",false);
					outstring(340,0,"",false);
				end;
			endformat;
		end;
	end;
	
	endjob;
	return;
end;















global
procedure ShipRn(record RcVc RepSpec)
begin
  record SHVc SHr;
  record LocationVc Locr;
  Boolean TrHs;
  Boolean testf;
  LongInt frorder,toorder;
  LongInt afr,ato;
  String 60 frcc,tocc;
  String 255 ckey;
  String 60 lastcust;
  Integer keys;
  val sht,ort,rowt;
  row SHVc SHrw;
  Integer i;
  Integer rwcnt;
  string 255 tstr;
  Integer rw;
  record ORVc ORr;
  val sum;
  Integer Printer;
  record INVc INr;
  string 20 frit,toit;
  string 20 frin,toin;
  string 255 itsz,mask,subsets,mskrep;
	record AZHatSHBlock AZHatSHb;
	row ORVc ORrw;
	longint curtick;
	
	curtick = getcurtick();
	blockload(AZHatSHb);
  Printer = 1;
  frit = FirstInRange(RepSpec.Stext,20);
  toit = LastInRange(RepSpec.Stext,20);
  frin = FirstInRange(RepSpec.LastAcc,20);
  toin = LastInRange(RepSpec.LastAcc,20);
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  frorder = FirstInRange(RepSpec.TransStr,20);
  toorder =  LastInRange(RepSpec.TransStr,20);
  frcc = FirstInRange(RepSpec.f2,20);
  tocc = LastInRange(RepSpec.f2,20);
  lastcust = "";
	if(Currentcompany!=29)then begin
		StartReportJob(USetStr(2581));
		rw = 1;
		HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
		Header(rw,tstr,1);
		rw = rw + 1;
		HTDetailLevel(RepSpec.ArtMode,tstr);
		Header(rw,tstr,0);
		HTNr(2588,2582,afr,ato,tstr);
		Header(rw,tstr,1);
		rw = rw + 1;
		HTNr(2589,2584,frorder,toorder,tstr);
		Header(rw,tstr,0);
		HTCusts(frcc,tocc,tstr);
		Header(rw,tstr,1);
		rw = rw + 1; 
		if (nonblank(RepSpec.f3)) then begin
			tstr = USetStr(2587);
			tstr = tstr & RepSpec.f3;
			Header(rw,tstr,0);
		end;
		if (nonblank(RepSpec.f4)) then begin
			tstr = USetStr(2768);
			tstr = tstr & RepSpec.f4;
			Header(rw,tstr,1);
			rw = rw + 1;
		end;
		HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
		if (nonblank(tstr)) then begin
			Header(rw,tstr,1);
		end;
		if (nonblank(RepSpec.f6)) then begin
			HTLocationGroup(RepSpec.f6,RepSpec.f6,tstr);
			Header(rw,tstr,0);
		end;
		if (nonblank(RepSpec.f7)) then begin
			HTLocationClassification(RepSpec.f7,RepSpec.f7,tstr);
			Header(rw,tstr,1);
			rw = rw + 1;
		end;
		HTItem(RepSpec.LastAcc,tstr);
		if (nonblank(tstr)) then begin
			rw = rw + 1;
			Header(rw,tstr,1);
			rw = rw + 1;
		end;
		if (HasItemGroups) then begin
			HTArtGroup(RepSpec.Stext,tstr);
			if (nonblank(tstr)) then begin
				Header(rw,tstr,1);
				rw = rw + 1;
			end;
		end;
		if (HasItemClassification) then begin
			HTItemClass(RepSpec.f8,tstr);
			if (nonblank(tstr)) then begin
				Header(rw,tstr,1);
				rw = rw + 1;
			end;
		end;  
		EndHeader;
  end else begin
		StartReportnoheaderjob(USetStr(2581));
		if(RepSpec.flags[1]==1 and RepSpec.flags[2]==0)then begin
			StartFormat(15);
			OutString(200,0,AZHatSHb.Hat1,false);
			EndFormat;
			StartFormat(15);
			OutString(185,0,AZHatSHb.Hat2,false);
			EndFormat;
			StartFormat(15);
			OutString(180,0,AZHatSHb.Hat3,false);
			EndFormat;
			StartFormat(15);
			OutString(213,0,AZHatSHb.Hat4,false);
			EndFormat;
			StartFormat(15);
			OutString(40,0,"",false);
			EndFormat;
			StartFormat(15);
			OutString(40,0,"",false);
			EndFormat;
			StartFormat(15);
			OutString(40,0,AZHatSHb.Text1,false);
			EndFormat;
			StartFormat(15);
			OutString(20,0,AZHatSHb.Text2,false);
			EndFormat;
			StartFormat(15);
			OutString(20,0,AZHatSHb.Text3,false);
			EndFormat;
			StartFormat(15);
			OutString(20,0,AZHatSHb.Text4,false);
			EndFormat;
			StartFormat(15);
			OutString(20,0,AZHatSHb.Text5,false);
			EndFormat;
		end;
	end;
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2582),false);
    OutString(60,0,USetStr(2583),false);
    OutString(130,0,USetStr(2584),false);
    OutString(200,0,USetStr(2585),false);
    OutString(260,0,USetStr(2586),false);
		OutString(320,0,"№ сч.Btrx",false);
    OutStringAdjustBiDi(480,0,USetStr(2928),true,M4Val,520);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2582),false);
    OutString(60,0,USetStr(2583),false);
    OutString(130,0,USetStr(2584),false);
    OutString(200,0,USetStr(2585),false);
    OutString(260,0,USetStr(2586),false);
		OutString(320,0,"№ сч.Btrx",false);
    OutStringAdjustBiDi(420,0,USetStr(2590),true,M4Val,460);
    OutStringAdjustBiDi(480,0,USetStr(2591),true,M4Val,520);
    EndFormat;
  end;

  if (RepSpec.flags[3]==1) then begin
   ckey = "CustCode";
   SHr.CustCode = frcc;
   SHr.SerNr = afr;
   keys = 2;
  end else begin
   ckey = "SerNr";
   SHr.SerNr = afr;
   keys = 1;
  end;

  if (RepSpec.ArtMode==0) then  begin
   Black_Divider(0,1);
  end;

  TrHs = true;
  while LoopKey(ckey,SHr,keys,TrHs) begin
   testf = true;
   if (RepSpec.flags[3]==1) then begin
    if nonblank(tocc) then begin
      if (SHr.CustCode>tocc) then begin
       TrHs = false;
      end;
    end;
    if (ato<>-1) then begin
      if (SHr.SerNr>ato) then begin
      TrHS = false;
      end;
    end;
   end else begin
    if (ato<>-1) then begin
      if (SHr.SerNr>ato) then begin
        TrHs = false;
      end;
    end;
    if nonblank(RepSpec.f2) then begin
      if ((tocc<SHr.CustCode) or (frcc>SHr.CustCode)) then begin
        testf = false;
      end;
    end;
   end;
   if (TrHs==false) then begin
    testf = false;
   end;
   if (testf) then begin
    if nonblank(RepSpec.TransStr) then begin
      if ((SHr.OrderNr<frorder) or (SHr.OrderNr>toorder)) then begin
        testf = false;
      end;
    end;
    if ((SHr.ShipDate<RepSpec.sStartDate) or (SHr.ShipDate>RepSpec.sEndDate)) then begin
        testf = false;
    end;
    if nonblank(RepSpec.f3) then begin
      if (RepSpec.f3<>SHr.ShipMode) then begin
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.f5)) then begin
      if (SHr.SHClass!=RepSpec.f5) then begin
        testf = false;
      end;
    end;
    if ((RepSpec.flags[1]==0) and (SHr.OKFlag==0)) then begin
      testf = false;
    end;
    if ((RepSpec.flags[2]==0) and (SHr.OKFlag<>0)) then begin
      testf = false;
    end;
    if (testf) then begin
      if (nonblank(RepSpec.f6) or nonblank(RepSpec.f7)) then begin
        Locr.Code = SHr.Location;
        ReadFirstMain(Locr,1,true);
        if (nonblank(RepSpec.f6)) then begin
          if (Locr.Group!=RepSpec.f6) then begin testf = false; end;
        end;
        if (nonblank(RepSpec.f7)) then begin
          if (SetInSet(RepSpec.f7,Locr.Classification)==false) then begin testf = false; end;
        end;
      end;
    end;
    if (testf) then begin
      if (nonblank(RepSpec.f4)) then begin
         testf = false;
         rwcnt = MatRowCnt(SHr);
         for (i = 0 ; i<rwcnt ;i=i+1) begin
           MatRowGet(SHr,i,SHrw);
           tstr = SHrw.Location;
           if (blank(tstr)) then begin
             tstr = SHr.Location;
           end; 
           if (tstr==RepSpec.f4) then begin
             testf = true;
             i = rwcnt;
           end;
         end;
      end;
    end;    

    if (RepSpec.ArtMode==1) then begin
      if (testf) then begin
        rwcnt = MatRowCnt(SHr);
        for (i=0;i<rwcnt;i=i+1) begin
          testf = true;
          MatRowGet(SHr,i,SHrw);
          if (nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.Stext) or (nonblank(RepSpec.f8))) then begin
            testf = ReadFirstItem(SHrw.ArtCode,INr,false,true);
          end else begin
            i = rwcnt;
          end;
          if (testf) then begin 
            if (nonblank(RepSpec.LastAcc)) then begin
              testf = false;
              if (FindItemVAR(INr.Code,itsz,mask,mskrep,subsets)) then begin
                if (RepSpec.LastAcc==SHrw.ArtCode) or (RepSpec.LastAcc==INr.Code) then begin 
                  testf = true;              
                end;
              end else begin
                if (INr.Code>=frin) and (INr.Code<=toin) then begin 
                  testf = true;              
                end; 
              end;
            end;
            if (testf) then begin 
              if (nonblank(RepSpec.Stext)) then begin
                testf = false;
                if (INr.Group>=frit) and (INr.Group<=toit) then begin
                  testf = true;
                end;
              end;
            end;
            if (testf) then begin
              if (nonblank(RepSpec.f8)) then begin
                testf = SetInSet2(RepSpec.f8,INr.DispGroups);
              end;           
            end;
            if (testf) then begin
              i = rwcnt;
            end;
          end;
        end;
      end;
    end;
      
    if (testf) then begin
      if (RepSpec.flags[3]==1) then begin
       if blank(lastcust) then begin
        lastcust=SHr.CustCode;
       end;
       if (lastcust<>SHr.CustCode) then begin
        if (RepSpec.Media==Printer) then begin
          NewPage(false);
        end;
        lastcust = SHr.CustCode;
       end;
      end;
      if RepSpec.ArtMode==1 then begin
        Black_Divider(0,1);
        RepShip(RepSpec,SHr,ort,sht);
      end;
      if RepSpec.ArtMode==0 then begin
        rowt = 0;
				if(Currentcompany==29)then begin 
					ORr.SerNr = SHr.OrderNr;
					if(ReadFirstMain(ORr,1,true))then begin end;
				end;
        rwcnt = MatRowCnt(SHr);
        for (i=0; i<rwcnt; i=i+1) begin
          MatRowGet(SHr,i,SHrw);
          testf = true;
          if (nonblank(RepSpec.f4)) then begin
            tstr = SHrw.Location;
            if (blank(tstr)) then begin
              tstr = SHr.Location;
            end; 
            if (tstr!=RepSpec.f4) then begin
              testf = false;
            end;
          end;
          if (testf) then begin
						if(currentcompany!=29)then begin
							sum = SHrw.FIFO*SHrw.Ship;
						end else begin
							matrowget(ORr,SHrw.OrdRow,ORrw);
							sum = ORrw.Sum;
						end;
            rowt = rowt+sum;
          end;
        end;
        StartFormat(15);
        OutLongInt(0,"DblSHVc",SHr.SerNr,false);
        OutDate(60,0,SHr.ShipDate,false);
        OutLongInt(130,0,SHr.OrderNr,false);
        OutString(200,0,SHr.CustCode,false);
        OutString(260,0,SHr.Addr0,false);
				if(Currentcompany==29)then begin 
					ORr.SerNr = SHr.OrderNr;
					if(ReadFirstMain(ORr,1,true))then begin
						OutLongInt(320,0,ORr.CustOrdNr,false);
					end;
				end;
        OutValBiDi(480,0,rowt,M4Val,true,520);
        EndFormat;
		
				if(Currentcompany==29)then begin
					StartFormat(15);
						OutString(30,0,"Товар",false);
						OutString(75,0,"Наимен.",false);
						OutString(160,0,"Сер.№",false);
						OutString(250,0,"Кол.",false);
						OutString(290,0,"Цена",false);
						OutString(320,0,"Арт.К.И",false);
						OutString(450,0,"Скидка",true);
						OutString(480,0,"Сумма",true);
					EndFormat;
					rwcnt = MatRowCnt(SHr);
					for (i=0; i<rwcnt; i=i+1) begin
						MatRowGet(SHr,i,SHrw);
						testf = true;
						if (nonblank(RepSpec.f4)) then begin
							tstr = SHrw.Location;
							if (blank(tstr)) then begin
								tstr = SHr.Location;
							end; 
							if (tstr!=RepSpec.f4) then begin
								testf = false;
							end;
						end;
						if (testf) then begin
							StartFormat(15);
								OutString(30,0,SHrw.ArtCode,false);
								OutString(75,0,SHrw.Spec,false);
								OutString(160,0,SHrw.SerialNr,false);
								OutString(250,0,SHrw.Ship,false);
								OutString(290,0,SHrw.BasePrice,false);
								matrowget(ORr,SHrw.OrdRow,ORrw);
								if(ORr.OrderClass!="SABIN")then begin
									OutString(320,0,right(ORrw.GlobalItemArtCode,len(ORrw.GlobalItemArtCode)-9),false);
								end else begin
									INr.Code = SHrw.ArtCode;
									if(ReadFirstMain(INr,1,true))then begin
										OutString(320,0,INr.AlternativeCode,false);
									end else begin
										OutString(320,0,"",false);
									end;
								end;
								OutValBiDi(450,0,ORrw.vRebate,M4Val,true,520);
								OutValBiDi(480,0,ORrw.Sum,M4Val,true,520);
							EndFormat;
						end;
					end;
					Black_Divider(0,1);
				end;
        sht = sht + rowt;
        ORr.SerNr = SHr.OrderNr;
        if ReadFirstMain(ORr,1,true) then begin
          if (SHr.CustCode<>ORr.CustCode) then begin
           StartFormat(15);
           OutString(100,0,UsetStr(1251),false);
           EndFormat;
          end;
        end else begin
          StartFormat(15);
          OutString(100,0,UsetStr(1251),false);
          EndFormat;
        end;
      end;
     end;
   end;
  end;
  Black_Divider(0,1);
  if RepSpec.ArtMode==0 then begin
    StartFormat(15);
    OutValBiDi(480,0,sht,M4Val,true,520);
    EndFormat;
  end;
  if RepSpec.ArtMode==1 then begin
    StartFormat(15);
    OutValBiDi(480,0,sht,M4Val,true,520);
    EndFormat;
  end;
	if((RepSpec.flags[1]==1 and RepSpec.flags[2]==0) and Currentcompany==29)then begin
		StartFormat(15);
		OutString(20,0,AZHatSHb.Text6,false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,AZHatSHb.Text7,false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"",false);
		OutString(300,0,"",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,AZHatSHb.Text8,false);
		OutString(300,0,AZHatSHb.Text9,false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"",false);
		OutString(300,0,"",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"",false);
		OutString(300,0,"",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,AZHatSHb.Text10,false);
		OutString(300,0,AZHatSHb.Text11,false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"",false);
		OutString(300,0,"",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"",false);
		OutString(300,0,"",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"________________________________________",false);
		OutString(300,0,"________________________________________",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"M.Y",false);
		OutString(300,0,"M.Y",false);
		EndFormat;
	end;
  EndJob;
	LogProcTime("ShipRn",getcurtick() - curtick);
  return;
end;
