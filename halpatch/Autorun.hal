//server-only
external function longint DateDiff(date,date);
external updating procedure CreatePLActivityMn(record RcVc);
remote function boolean CompanyIsJWLikeCompany(Integer);
external updating procedure GruppoCoinParseAndReplaceInputFiles(string);
external updating procedure GruppoCoinParseAndReplaceOutputFiles();
external updating procedure CreateTRCurDifMn(record RcVc);
external updating procedure PasteRebCodeLCVCMn();
external updating procedure SendVisitstoCRM();
external updating procedure RekalcPriceGlItem();
remote updating procedure CreateStockMvFromRetStock();
remote updating procedure RecalcDiscMn();
remote updating procedure AlarmECMessageMn();//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton 15:00 12.03.2019
remote updating procedure CleanStocksInGlobalItemMn();//Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton 10:27 19.03.2019


global updating procedure AutoUnGroupIV()
begin
record IVVc IVr;
date todate;
boolean TrHs,testf;

  todate = addday(currentdate,-16);
  IVr.InvDate = addday(currentdate,-1);
  if(CompanyIsJWLikeCompany(currentcompany))then begin
  	IVr.InvDate = currentdate;	
  end;
  TrHs = true;
  while(loopbackkey("InvDate",IVr,1,TrHs))begin
  	testf = true;
    if(IVr.InvDate<todate)then begin TrHs = false; testf = false; end;
    if(IVr.OKFlag==0)then begin testf = false;  end;
    
    if(testf)then begin
      if(nonblank(IVr.SalesGroup))then begin
        IVr.SalesGroup = "";
        recordStore(IVr,true);
      end;
    end;
    
  end;

return;
end;


global updating procedure CUUpdateLoyaltyRebCode()
begin
  record CUVc CUr,oldCUr;
  record LCMLevelSetBlock LCMLevelSetBl;
  row LCMLevelSetBlock LCMLevelSetrw;
  Integer i,rwcnt;
  record LoyaltyCardVc LoyaltyCardr;
  boolean testf;
  record RebVc Rebr,Reb2r;
  string 20 rebcode;
  string 20 clevel;
  val reb,reb2,points;
  
  blockload(LCMLevelSetBl);
  rwcnt = matrowcnt(LCMLevelSetBl);
  
  LoyaltyCardr.SerNr = "";
  while(loopmain(LoyaltyCardr,1,true))begin
    reb = 0;
    reb2 = 0;
    
    testf = true;
    if(LoyaltyCardr.Closed>0)then begin testf = false; end;
    
    if(testf)then begin
      CUr.Code = LoyaltyCardr.CustCode;
      if(readfirstmain(CUr,1,true) and left(CUr.Code,2)!="CC")then begin
				points = LoyaltyCardr.PointsBalance;
				clevel = LoyaltyCardr.LCMLevel;
				rebcode = "";
				for (i=0;i<rwcnt;i=i+1) begin
					MatRowGet(LCMLevelSetBl,i,LCMLevelSetrw);
					if ((points>=LCMLevelSetrw.FromPoints) and ((points<=LCMLevelSetrw.ToPoints) or (LCMLevelSetrw.ToPoints==0)) and (clevel==LCMLevelSetrw.LCMLevel)) then begin
						rebcode = LCMLevelSetrw.RebCode;
						i = rwcnt;
					end;
				end;  
				if(nonblank(rebcode))then begin
					Rebr.Code = rebcode;
					readfirstmain(Rebr,1,true);
					reb = Rebr.vra0;
					if(nonblank(CUr.RebCode))then begin
						Reb2r.Code = CUr.RebCode;
						readfirstmain(Reb2r,1,true);
						reb2 = Reb2r.vra0;
					end;
				
					if(reb>reb2)then begin
						recordcopy(oldCUr,CUr);
						CUr.RebCode = Rebr.Code;
						recordUpdate(oldCUr,CUr,true);
					end;
				end;
      end;
    end;
  end;
  
return;
end;


global webpublic updating procedure WebCUUPdate()
begin
	
	CUUpdateLoyaltyRebCode;

return;
end;





global updating procedure AutoCetRebCodeCU()
begin
record CUVc CUr,oldCUr;
record RebTableBlock RTb;
row RebTableBlock RTrw;
record NewRebTableBlock NRTb;
row NewRebTableBlock NRTrw;
boolean testf,TrHs,done;
integer mtrw,nmtrw,i;
record RebVc Rebr,Reb2r;
date limdate;
string 20 oldrebcode;

limdate.year = 2015;
limdate.day = 1;
limdate.month = 1;

	blockload(RTb);
	blockload(NRTb);
	mtrw = matrowcnt(RTb);
	nmtrw = matrowcnt(NRTb);
	
	if(mtrw>0)then begin
		Trhs = true;
		CUr.Code = "";
		CUr.EmployeeType = 1;
		while(loopkey("EmployeeActCode",CUr,2,TrHs))begin
			recordcopy(oldCUr,CUr);
			oldrebcode = CUr.RebCode;
			done = false;
			testf = true;
			
			if(CUr.EmployeeType==0)then begin TrHs = false; testf = false; end;
			if(blank(CUr.DateCreated))then begin testf = false; end;
			
			if(testf)then begin
				if(CUr.DateCreated<limdate)then begin
					for(i=0;i<mtrw;i=i+1)begin
						matrowget(RTb,i,RTrw);
						if(datediff(currentdate,CUr.DateCreated)>=RTrw.Days)then begin
							CUr.RebCode = RTrw.RebCode;
							/*if(nonblank(CUr.RebCode))then begin
								Rebr.Code = CUr.RebCode;
								if(readfirstmain(Rebr,1,true))then begin
									Reb2r.Code = RTrw.RebCode;
									if(readfirstmain(Reb2r,1,true))then begin
										if(Reb2r.vra0>Rebr.vra0)then begin
											CUr.RebCode = RTrw.RebCode;
											done = true;
										end;
									end;
								end else begin
									if(CUr.RebCode!=RTrw.RebCode)then begin
										CUr.RebCode = RTrw.RebCode;
										done = true;
									end;
								end;
							end else begin
								if(CUr.RebCode!=RTrw.RebCode)then begin
									CUr.RebCode = RTrw.RebCode;
									done = true;
								end;
							end;*/
							if(CUr.RebCode!=oldrebcode)then begin
								done = true;
							end;
						end;
					end;
				end else begin
					for(i=0;i<nmtrw;i=i+1)begin
						matrowget(NRTb,i,NRTrw);
						if(datediff(currentdate,CUr.DateCreated)>=NRTrw.Days)then begin
							CUr.RebCode = NRTrw.RebCode;
							/*if(nonblank(CUr.RebCode))then begin
								Rebr.Code = CUr.RebCode;
								if(readfirstmain(Rebr,1,true))then begin
									Reb2r.Code = RTrw.RebCode;
									if(readfirstmain(Reb2r,1,true))then begin
										if(Reb2r.vra0>Rebr.vra0)then begin
											CUr.RebCode = RTrw.RebCode;
											done = true;
										end;
									end;
								end else begin
									if(CUr.RebCode!=RTrw.RebCode)then begin
										CUr.RebCode = RTrw.RebCode;
										done = true;
									end;
								end;
							end else begin
								if(CUr.RebCode!=RTrw.RebCode)then begin
									CUr.RebCode = RTrw.RebCode;
									done = true;
								end;
							end;*/
						end;
					end;
					if(CUr.RebCode!=oldrebcode)then begin
						done = true;
					end;
				end;
				
				if(blank(CUr.PLCode))then begin
					CUr.PLCode = "RRP";
					done = true;
				end;
				//CUr.CurncyCode = "";
				//done = true;
				if(blank(CUr.Classification))then begin
					CUr.Classification = "IDEMPLOYEE";
					done = true;
				end;
				if(done)then begin
					recordupdate(oldCUr,CUr,true);
				end;
				
			end;
			
			
		end;
	end;


return;
end;


global updating procedure TimeAutoRunMinutes()
begin
	record CompaniesBlock CBb;
	integer i,mtrw;
	record RcVc RepSpec;
	record NewClassifChBlock NCb;
	blockload(CBb);
	
	if(getminute(currenttime)==6 and gethour(currenttime)==8)then begin
		logtext(0,"TimeAutoRunMinutes in " & getminute(currenttime));
		mtrw = matrowcnt(CBb);
		For(i=0;i<mtrw;i=i+1) begin
			if(CompanyIsJWLikeCompany(i) or i==1 or i==2 or i==4 or i==5 or i==6 or i==7 or i==8 or i==9 or i==25 or i==16)then begin
				if (SetCompany(i,false)) then begin
					logtext(0,"CreatePLActivityMn in " & i);
					CreatePLActivityMn(RepSpec);
				end;
			end;
		end; 
		ResetCompany(1);  
	end;
	
return;
end;


global updating procedure UpdateDBLockBlock()
begin
	integer curcom,i,rwcnt;
	record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  record DBLockBlock BDb;
  
	curcom = currentcompany;
	BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(Compb,i,Comprw);
    if (SetServerCompanyCode(Comprw.CompCode)) then begin
    	blockload(BDb);
    	if(nonblankdate(BDb.TRLock))then begin
    		BDb.TRLock = addday(currentdate,-3);
    		BDb.OtherLock = addday(currentdate,-3);
    		BDb.SLLock = addday(currentdate,-3);
    		BDb.PLLock = addday(currentdate,-3);
    		BDb.PLLock = addday(currentdate,-3);
    		blockstore(BDb);
    	end;
    end;
  end;
  resetcompany(curcom);

return;
end;


global updating procedure TimeAutoRun()
begin
	integer SWAROVSKI,LLADRO,Jewelry,Villeroy,Rosental,Baccarat,Ambience,IvDelorme,Creative,CassaCoin,Xtravaganza;
	record RcVc RepSpec;
	integer i,CompQty;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	
  logtext(0,"TimeAutoRun");
	SWAROVSKI = 1;
	LLADRO = 2;
	Jewelry = 3;
	Villeroy = 4;
	Rosental = 5;
	Baccarat = 6;
	Ambience = 7;
	IvDelorme = 8;
	Creative = 9;
	CassaCoin = 25;
	Xtravaganza = 16;

	UpdateDBLockBlock;	
	CleanStocksInGlobalItemMn; //Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton 10:26 19.03.2019
	
	BlockLoad(Compb);
	
	
	CompQty = matrowcnt(Compb);
	
	for (i=0;i<CompQty;i=i+1)begin
		matrowget(Compb,i,Comprw);
		if(Comprw.ActiveStatus==0 and (!CompanyIsJWLikeCompany(i+1) or i+1==3))then begin
			SetCompany(i+1,false);
			RecalcDiscMn;
		end;
	end;
	
	if (SetCompany(SWAROVSKI,false)) then begin
		AutoCetRebCodeCU;
		AutoUnGroupIV;
		CUUpdateLoyaltyRebCode;
		PasteRebCodeLCVCMn;
		RekalcPriceGlItem;
		ResetCompany(SWAROVSKI);  
  end;
  if (SetCompany(LLADRO,false)) then begin
		AutoUnGroupIV;
		RekalcPriceGlItem;
		ResetCompany(LLADRO);  
  end;
  if (SetCompany(Jewelry,false)) then begin
		//AutoUnGroupIV;
		RekalcPriceGlItem;
		CreatePLActivityMn(RepSpec);
		ResetCompany(Jewelry);  
  end;
  
  if (SetCompany(17,false)) then begin
		//AutoUnGroupIV;
		RekalcPriceGlItem;
		CreatePLActivityMn(RepSpec);
		ResetCompany(17);  
  end;
  if (SetCompany(19,false)) then begin
		//AutoUnGroupIV;
		RekalcPriceGlItem;
		CreatePLActivityMn(RepSpec);
		ResetCompany(19);  
  end;
	if (SetCompany(29,false)) then begin
		logtext(0,"CreateStockMvFromRetStock");
    CreateStockMvFromRetStock;
		ResetCompany(29);  
	end;
  if (SetCompany(20,false)) then begin
		//AutoUnGroupIV;
		RekalcPriceGlItem;
		CreatePLActivityMn(RepSpec);
		ResetCompany(20);  
  end;
  if (SetCompany(21,false)) then begin
		//AutoUnGroupIV;
		RekalcPriceGlItem;
		CreatePLActivityMn(RepSpec);
		ResetCompany(21);  
  end;
  if (SetCompany(22,false)) then begin
		//AutoUnGroupIV;
		RekalcPriceGlItem;
		CreatePLActivityMn(RepSpec);
		ResetCompany(22);  
  end;
  if (SetCompany(23,false)) then begin
		//AutoUnGroupIV;
		RekalcPriceGlItem;
		CreatePLActivityMn(RepSpec);
		ResetCompany(23);  
  end;
  if (SetCompany(24,false)) then begin
		//AutoUnGroupIV;
		RekalcPriceGlItem;
		CreatePLActivityMn(RepSpec);
		ResetCompany(24);  
  end;
  
  
  if (SetCompany(Villeroy,false)) then begin
		AutoUnGroupIV;
		RekalcPriceGlItem;
		CreatePLActivityMn(RepSpec);
		ResetCompany(Villeroy);  
  end;
  if (SetCompany(Rosental,false)) then begin
		AutoUnGroupIV;
		RekalcPriceGlItem;
		ResetCompany(Rosental);  
  end;
  if (SetCompany(Baccarat,false)) then begin
		AutoUnGroupIV;
		RekalcPriceGlItem;
		ResetCompany(Baccarat);  
  end;
  if (SetCompany(Ambience,false)) then begin
		AutoUnGroupIV;
		RekalcPriceGlItem;
		ResetCompany(Ambience);  
  end;
  if (SetCompany(IvDelorme,false)) then begin
		AutoUnGroupIV;
		RekalcPriceGlItem;
		ResetCompany(IvDelorme);  
  end;
  if (SetCompany(Creative,false)) then begin
		AutoUnGroupIV;
		RekalcPriceGlItem;
		ResetCompany(Creative);  
  end;
  if (SetCompany(CassaCoin,false)) then begin
		AutoUnGroupIV;
		RekalcPriceGlItem;
		ResetCompany(CassaCoin);
  end;
  if (SetCompany(Xtravaganza,false)) then begin
		AutoUnGroupIV;
		RekalcPriceGlItem;
		ResetCompany(Xtravaganza);
  end;
  
  if (SetCompany(1,false)) then begin
    for(i=1;i<7;i=i+1)begin
    	RecordClear(RepSpec);
			RepSpec.sStartDate = StringToDate("08/10/18");
			RepSpec.sEndDate = AddDay(currentdate,-1);
			RepSpec.ObjStr = "SW" & i;
			CreateTRCurDifMn(RepSpec);
    end;
	end;
	if (SetCompany(2,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("11/11/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
  if (SetCompany(3,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
	if (SetCompany(4,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("08/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "VB1";
    CreateTRCurDifMn(RepSpec);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("08/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "VB2";
    CreateTRCurDifMn(RepSpec);
	end;
	if (SetCompany(5,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("28/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
	if (SetCompany(6,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("28/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
	if (SetCompany(7,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("08/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "AMBIANCE";
    CreateTRCurDifMn(RepSpec);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("08/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "DISTRIBUZI";
    CreateTRCurDifMn(RepSpec);
	end;
	if (SetCompany(9,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("07/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
	if (SetCompany(13,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("17/9/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
	if (SetCompany(16,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("21/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "EXTRAVAGANZA";
    CreateTRCurDifMn(RepSpec);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("21/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "EXTRAVAGANZA_2";
    CreateTRCurDifMn(RepSpec);
	end;
  if (SetCompany(17,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
  if (SetCompany(19,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
  if (SetCompany(20,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
  if (SetCompany(21,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
  if (SetCompany(22,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
  if (SetCompany(23,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
  if (SetCompany(24,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
	if (SetCompany(25,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("22/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "COINCASA";
    CreateTRCurDifMn(RepSpec);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("22/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "COINCASA2";
    //CreateTRCurDifMn(RepSpec);
	end;
	if (SetCompany(28,false)) then begin
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("01/01/2019");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
	
	if (SetCompany(30,false)) then begin
    RecordClear(RepSpec);
    RepSpec.ObjStr = "PD";
    RepSpec.sStartDate = StringToDate("01/01/2019");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
	if (SetCompany(31,false)) then begin
    RecordClear(RepSpec);
    RepSpec.ObjStr = "BANG_O";
    RepSpec.sStartDate = StringToDate("01/01/2019");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec);
	end;
	
	

return;
end;

global updating procedure BackgroundOperations()
begin
  Time InTransmissionBegin,InTransmissionEnd,
       OutTransmissionBegin,OutTransmissionEnd;
  record CoinSettingsBlock CoinSb;
  string 255 path;
  integer compnr,CompQty,i;
  record WebReportChBlock WRChb;
	record BtrxReportChBlock BRChb;
  area req,reply;
  json jsresponse;
  string 100 host;
  longint port;
  record NewClassifChBlock NCb;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
  
   blockload(WRChb);
	
		blockload(Compb);
		CompQty = matrowcnt(Compb);
		
		for (i=0;i<CompQty;i=i+1) begin
			matrowget(Compb,i,Comprw);
			if(Comprw.ActiveStatus==0 and (Right(getminute(currenttime),1)=="0" or Right(getminute(currenttime),1)=="5"))then begin
				SetCompany(i+1,false);
				AlarmECMessageMn;
			end;
			
			if(Comprw.ActiveStatus==0 and (!CompanyIsJWLikeCompany(i+1) or (i+1)==3))then begin
				SetCompany(i+1,false);
				blockload(NCb);
				if(NCb.Update!=0 and Right(getminute(currenttime),1)=="0") then begin
					logtext(0,"Item Discount update " & getminute(currenttime));
					NCb.Update = 0;
					BlockStore(NCb);
					// RecalcDiscMn;
				end;	
			end;
		end;	
	
  compnr = currentcompany;
  
  logtext(0,"BackgroundOperations");
  
  if(getminute(currenttime)==0)then begin
  	//  SendVisitstoCRM;
  end;
  
  BlockLoad(CoinSb);
  path = CoinSb.inDir;
  InTransmissionBegin = stringtotime("11:25:00");
  InTransmissionEnd = stringtotime("11:30:00");
  OutTransmissionBegin = stringtotime("23:15:00");
  OutTransmissionEnd = stringtotime("23:20:00");
  TimeAutoRunMinutes;
    
  if (CurrentTime >= InTransmissionBegin) and (CurrentTime <= InTransmissionEnd) then begin
    if (SetCompany(25,false)) then begin
      GruppoCoinParseAndReplaceInputFiles(path);
    end;
  end;
  
  if (CurrentTime >= OutTransmissionBegin) and (CurrentTime <= OutTransmissionEnd) then begin
    if (SetCompany(25,false)) then begin
      GruppoCoinParseAndReplaceOutputFiles;
    end;
  end;
  
  setcompany(1,false);
  blockload(BRChb);
	if(BRChb.WabUPDstockf==1 and BRChb.WEBCheck==1)then begin
		BRChb.WabUPDstockf = 0;
		BlockStore(BRChb);
		logtext(0,"************************************************************WEB UPD Stock flag false*****************");
		port = 443;
		logtext(0,"SendWebRequest " & BRChb.PathSinc & ":" & port & BRChb.PageSinc);
		SendWebRequest(BRChb.PathSinc,port,-1,true,"GET",BRChb.PageSinc,"text/xml","",false,req,reply,1);
	end;
	
  logtext(0,"BackgroundOperations END");
  
  ResetCompany(compnr);  
end;