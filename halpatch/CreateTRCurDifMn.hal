//server-only
external updating procedure DeleteTransaction(LongInt,Integer);
external procedure GetObjs(string,string,var string);
external procedure FindNLAccBal(string,string,string,Integer,Date,Date,Integer,Integer,Boolean,string,Integer,string,string,var val);
external procedure TRVc_PasteCurDebVal(var record TRVc,Integer);
external procedure TRVc_PasteCurncy(var record TRVc,Integer);
external procedure TRDDefault(var record TRVc,Integer,string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function Boolean TRVc_PasteAccNumber(var record TRVc,Integer,Integer,Boolean);
external function roundmode SetRoundModeD(Integer);
external procedure TRSumup(var record TRVc,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

procedure CountEndSaldoInBase(string accnum, date enddate, var vector val saldo, string curtoskip, integer serviceIntYc, var longint corrTRrNum, var array string CurencyList, var array string ObjectList)
begin
  boolean TrHs;
  record FBVc FBr;
  record MainVc mainr;
  record TRVc TRr;
  row TRVc TRrw;
  row FBVc FBrw;
  integer i,rwcnt,CLi,OLi;
  string 20 objstore;
  string 255 t;
  boolean fillobjf;
  vector boolean CurInArr,ObjInArr;
  
  if (ObjectList.length==0) then begin fillobjf = true; end;
  mainr.AccNumber = accnum;
  mainr.TransDate = "1/1/1900";
  TrHs = true;
  while (LoopMain(mainr,2,TrHs)) begin
    if ((mainr.AccNumber!=accnum) or (mainr.TransDate>enddate)) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      if (mainr.FileName=="TRVc") then begin
        TRr.Number = mainr.TransNr;
        TRr.IntYc = mainr.IntYc;
        if (ReadFirstMain(TRr,2,true)) then begin
          if (mainr.TransDate == TRr.TransDate) then begin
            if (TRr.IntYc==serviceIntYc) and (corrTRrNum<TRr.Number) then begin
              corrTRrNum = TRr.Number;
            end;
            rwcnt = MatRowCnt(TRr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(TRr,i,TRrw);
              if ((TRrw.AccNumber == accnum) and (TRrw.ovst <> 1) and (TRrw.stp==1) and (TRrw.Curncy!=curtoskip)) then begin
                objstore= "";
                GetObjs("STORE",TRrw.Objects,objstore);
                if (fillobjf) then begin
                  if (!ObjInArr[objstore]) then begin
                    ObjectList[OLi] = objstore;
                    ObjInArr[ObjectList[OLi]] = true;
                    OLi = OLi + 1;
                  end;
                  if (!CurInArr[TRrw.Curncy]) then begin
                    CurencyList[CLi] = TRrw.Curncy;
                    CurInArr[CurencyList[CLi]] = true;
                    CLi = CLi + 1;
                  end;
                  t = accnum & ":" & TRrw.Curncy & ":" & objstore;
                  saldo[t] = saldo[t] + TRrw.DebVal - TRrw.CredVal;
                  saldo[t & ":incur"] = saldo[t & ":incur"] + TRrw.CurDebVal - TRrw.CurCredVal;
                end else begin
                  if (objstore==ObjectList[0]) then begin
                    if (!CurInArr[TRrw.Curncy]) then begin
                      CurencyList[CLi] = TRrw.Curncy;
                      CurInArr[CurencyList[CLi]] = true;
                      CLi = CLi + 1;
                    end;
                    t = accnum & ":" & TRrw.Curncy & ":" & objstore;
                    saldo[t] = saldo[t] + TRrw.DebVal - TRrw.CredVal;
                    saldo[t & ":incur"] = saldo[t & ":incur"] + TRrw.CurDebVal - TRrw.CurCredVal;
                  end;
                end;
              end;
            end;
            
          end;
        end;
      end;
      if (mainr.FileName=="FBVc") then begin
        FBr.SerNr = mainr.TransNr;
        if (ReadFirstMain(FBr,1,true)) then begin
          if (mainr.TransDate==FBr.TransDate) then begin
            rwcnt = MatRowCnt(FBr);
            objstore= "";
            GetObjs("STORE",FBr.Objects,objstore);
            if (fillobjf) then begin
              if (!ObjInArr[objstore]) then begin
                ObjectList[OLi] = objstore;
                ObjInArr[ObjectList[OLi]] = true;
                OLi = OLi + 1;
              end;
              for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(FBr,i,FBrw);
              if (!CurInArr[FBrw.CurncyCode]) then begin
                CurencyList[CLi] = FBrw.CurncyCode;
                CurInArr[CurencyList[CLi]] = true;
                CLi = CLi + 1;
              end;
              if ((FBrw.AccNumber == accnum) and (FBrw.CurncyCode!=curtoskip)) then begin
                t = accnum & ":" & FBrw.CurncyCode & ":" & objstore;
                saldo[t] = saldo[t] + FBrw.DebVal - FBrw.CredVal;
                saldo[t & ":incur"] = saldo[t & ":incur"] + FBrw.CurDebVal - FBrw.CurCredVal;
              end;
            end;
            end else begin
              if (objstore==ObjectList[0]) then begin
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(FBr,i,FBrw);
                  if (!CurInArr[FBrw.CurncyCode]) then begin
                    CurencyList[CLi] = FBrw.CurncyCode;
                    CurInArr[CurencyList[CLi]] = true;
                    CLi = CLi + 1;
                  end;
                  if ((FBrw.AccNumber == accnum) and (FBrw.CurncyCode!=curtoskip)) then begin
                    t = accnum & ":" & FBrw.CurncyCode & ":" & objstore;
                    saldo[t] = saldo[t] + FBrw.DebVal - FBrw.CredVal;
                    saldo[t & ":incur"] = saldo[t & ":incur"] + FBrw.CurDebVal - FBrw.CurCredVal;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  
  return;
end;

global
updating procedure CreateFixingTRMn(record RcVc RepSpec)
begin
  record TRVc corrTRr;
  row TRVc corrTRrw;
  integer i,rownr,serviceIntYc,pos,ai;
  val tmpval;
  vector val saldo;
  array string 255 tags;
  array string 255 tmp1,tmp2;
  boolean TrHs;
  string 255 t,comment;
  string 20 crn,objstore,tstr;
  array string 5 accnumber;
  longint corrTRrNum;
  
  serviceIntYc = 300;
  if nonblank(RepSpec.f1) then begin
    accnumber[0] = RepSpec.f1;
  end else begin
    accnumber[ai] = "50"; ai = ai + 1;
    accnumber[ai] = "52"; ai = ai + 1;
    accnumber[ai] = "53"; ai = ai + 1;
    accnumber[ai] = "58"; ai = ai + 1;
    accnumber[ai] = "59"; ai = ai + 1;
    accnumber[ai] = "59/1"; ai = ai + 1;
    accnumber[ai] = "59/2"; ai = ai + 1;
  end;
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  
  for (ai=0;ai<accnumber.length;ai=ai+1) begin
    comment = USetStr(35148) & " " & accnumber[ai];
    corrTRr.TransDate = RepSpec.d1;
    resetloop(corrTRr);
    TrHs = true;
    while(loopmain(corrTRr,1,TrHs)) begin
      if (corrTRr.IntYc==serviceIntYc) and (corrTRr.Comment==comment) then begin
        DeleteTransaction(corrTRr.Number,corrTRr.IntYc);
        stepback(corrTRr);
      end;
    end;
    RecordClear(corrTRr);
    CountEndSaldoInBase(accnumber[ai],RepSpec.d1,saldo,"",serviceIntYc,corrTRrNum,tmp1,tmp2);
    if (corrTRrNum<0) then begin
      corrTRrNum = 0;
    end;
    corrTRrNum = corrTRrNum + 1;
    getvectortags(saldo,tags);
    for(i=0;i<tags.length;i=i+1)begin
      pos = 0;
      crn = "";
      objstore = "";
      ExtractObjWithSeparator(":",tags[i],true,pos,tstr);
      if (tstr==accnumber[ai]) then begin
        tstr = "";
        ExtractObjWithSeparator(":",tags[i],true,pos,crn);
        ExtractObjWithSeparator(":",tags[i],true,pos,objstore);
        ExtractObjWithSeparator(":",tags[i],true,pos,tstr);
        if ((objstore==RepSpec.ObjStr) or blank(RepSpec.ObjStr)) and (tstr!="incur") then begin
          t = accnumber[ai] & ":" & crn & ":" & objstore;
          if ((saldo[t]!=blankval) and (saldo[t]!=0)) or ((saldo[t & ":incur"]!=blankval) and (saldo[t & ":incur"]!=0)) then begin
            if (MatRowCnt(corrTRr)==0) then begin
              RecordNew(corrTRr);
              corrTRr.TransDate = RepSpec.d1;
              corrTRr.IntYc = serviceIntYc;
              corrTRr.Number = corrTRrNum;
              corrTRrNum = corrTRrNum + 1;
              corrTRr.Comment = comment;
              corrTRr.RegDate = CurrentDate;
              corrTRr.RegTime = CurrentTime;
            end;
            ClearRow(corrTRr,corrTRrw,1);
            rownr = MatRowCnt(corrTRr);
            corrTRrw.AccNumber = accnumber[ai];
            MatRowInsert(corrTRr,rownr,corrTRrw);
            TRVc_PasteAccNumber(corrTRr,1,rownr,true);
            MatRowGet(corrTRr,rownr,corrTRrw);
            corrTRrw.Curncy = crn;
            MatRowPut(corrTRr,rownr,corrTRrw);
            TRVc_PasteCurncy(corrTRr,rownr);
            MatRowGet(corrTRr,rownr,corrTRrw);
            corrTRrw.Objects = objstore;
            corrTRrw.CredVal = round(saldo[t],SetRoundModeD(2));
            corrTRrw.CurCredVal = round(saldo[t & ":incur"],SetRoundModeD(2));
            MatRowPut(corrTRr,rownr,corrTRrw);
            
            rownr = MatRowCnt(corrTRr);
            corrTRrw.CredVal = 0;
            corrTRrw.CurCredVal = 0;
            corrTRrw.CurDebVal = round(saldo[t & ":incur"],SetRoundModeD(2));
            MatRowInsert(corrTRr,rownr,corrTRrw);
            TRVc_PasteCurDebVal(corrTRr,rownr);
          end;
        end;
      end;
    end;
    if (MatRowCnt(corrTRr)!=0) then begin
      TRSumup(corrTRr,tmpval);
      if (corrTRr.DiffVal!=0) then begin
        ClearRow(corrTRr,corrTRrw,1);
        rownr = MatRowCnt(corrTRr);
        corrTRrw.AccNumber = "00";
        MatRowInsert(corrTRr,rownr,corrTRrw);
        TRVc_PasteAccNumber(corrTRr,1,rownr,true);
        MatRowGet(corrTRr,rownr,corrTRrw);
        TRDDefault(corrTRr,rownr,"");
      end;
      RecordInsert(corrTRr,true);
    end;
  end;
  
  return;
end;

global
updating procedure CreateTRCurDifMn(record RcVc RepSpec)
begin
  record BaseCurBlock bcur;
  record FBVc FBr;
  record MainVc mainr;
  record TRVc TRr,corrTRr;
  row TRVc TRrw,corrTRrw;
  row FBVc FBrw;
  integer i,rwcnt,CLi,OLi,rownr,serviceIntYc,COi,pos,ai;
  val fr,to1,to2,b1,b2,tmpval;
  vector val rate,saldo,corr;
  vector boolean ObjInArr,CurInArr;
  array string 20 CurencyList,ObjectList;
  array string 100 COList;
  array string 255 tags;
  boolean TrHs;
  date curdate,td;
  string 100 t,comment;
  string 20 crn,objstore,tstr;
  array string 5 accnumber;
  longint corrTRrNum;
  
  BlockLoad(bcur);
  serviceIntYc = 300;
  
  if nonblank(RepSpec.f1) then begin
    accnumber[0] = RepSpec.f1;
  end else begin
    accnumber[ai] = "50"; ai = ai + 1;
    accnumber[ai] = "52"; ai = ai + 1;
    accnumber[ai] = "53"; ai = ai + 1;
    accnumber[ai] = "58"; ai = ai + 1;
    accnumber[ai] = "59"; ai = ai + 1;
    accnumber[ai] = "59/1"; ai = ai + 1;
    accnumber[ai] = "59/2"; ai = ai + 1;
  end;
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  if nonblank(RepSpec.ObjStr) then begin
    ObjectList[0] = RepSpec.ObjStr;
  end;
  
  for (ai=0;ai<accnumber.length;ai=ai+1) begin
    comment = USetStr(35147) & " " & accnumber[ai];
    corrTRr.TransDate = RepSpec.sStartDate;
    resetloop(corrTRr);
    TrHs = true;
    while(loopmain(corrTRr,1,TrHs)) begin
      if (corrTRr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
      if TrHs and (corrTRr.IntYc==serviceIntYc) and (corrTRr.Comment==comment) then begin
        DeleteTransaction(corrTRr.Number,corrTRr.IntYc);
        stepback(corrTRr);
      end;
    end;
    RecordClear(corrTRr);
    TrHs = true;
    
    curdate = RepSpec.sStartDate;
    CountEndSaldoInBase(accnumber[ai],curdate,saldo,"",serviceIntYc,corrTRrNum,CurencyList,ObjectList);
    if (corrTRrNum<0) then begin
      corrTRrNum = 0;
    end;
    corrTRrNum = corrTRrNum + 1;
    curdate = AddDay(curdate,1);
    while (curdate<=RepSpec.sEndDate) begin
      resetloop(mainr);
      mainr.AccNumber = accnumber[ai];
      mainr.TransDate = curdate;
      TrHs = true;
      while (LoopMain(mainr,2,TrHs)) begin
        if ((mainr.AccNumber!=accnumber[ai]) or (mainr.TransDate!=curdate)) then begin
          TrHs = false;
        end;
        if (TrHs) then begin
          if (mainr.FileName=="TRVc") then begin
            TRr.Number = mainr.TransNr;
            TRr.IntYc = mainr.IntYc;
            if (ReadFirstMain(TRr,2,true)) then begin
              if (mainr.TransDate == TRr.TransDate) then begin
                rwcnt = MatRowCnt(TRr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(TRr,i,TRrw);
                  if ((TRrw.AccNumber == accnumber[ai]) and (TRrw.ovst <> 1) and (TRrw.stp==1) and (TRrw.Curncy!=bcur.BaseCur1)) then begin
                    objstore= "";
                    GetObjs("STORE",TRrw.Objects,objstore);
                    if (!ObjInArr[objstore]) then begin
                      ObjectList[OLi] = objstore;
                      ObjInArr[ObjectList[OLi]] = true;
                      OLi = OLi + 1;
                    end;
                    if (!CurInArr[TRrw.Curncy]) then begin
                      CurencyList[CLi] = TRrw.Curncy;
                      CurInArr[CurencyList[CLi]] = true;
                      CLi = CLi + 1;
                    end;
                    t = accnumber[ai] & ":" & TRrw.Curncy & ":" & objstore;
                    saldo[t] = saldo[t] + TRrw.DebVal - TRrw.CredVal;
                    saldo[t & ":incur"] = saldo[t & ":incur"] + TRrw.CurDebVal - TRrw.CurCredVal;
                  end;
                end;
              end;
            end;
          end;
          if (mainr.FileName=="FBVc") then begin
            FBr.SerNr = mainr.TransNr;
            if (ReadFirstMain(FBr,1,true)) then begin
              if (mainr.TransDate==FBr.TransDate) then begin
                rwcnt = MatRowCnt(FBr);
                objstore= "";
                GetObjs("STORE",FBr.Objects,objstore);
                if (!ObjInArr[objstore]) then begin
                  ObjectList[OLi] = objstore;
                  ObjInArr[ObjectList[OLi]] = true;
                  OLi = OLi + 1;
                end;
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(FBr,i,FBrw);
                  if ((FBrw.AccNumber == accnumber[ai]) and (FBrw.CurncyCode!=bcur.BaseCur1)) then begin
                    if (!CurInArr[FBrw.CurncyCode]) then begin
                      CurencyList[CLi] = FBrw.CurncyCode;
                      CurInArr[CurencyList[CLi]] = true;
                      CLi = CLi + 1;
                    end;
                    t = accnumber[ai] & ":" & FBrw.CurncyCode & ":" & objstore;
                    saldo[t] = saldo[t] + FBrw.DebVal - FBrw.CredVal;
                    saldo[t & ":incur"] = saldo[t & ":incur"] + FBrw.CurDebVal - FBrw.CurCredVal;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
      for (CLi=0;Cli<CurencyList.length;CLi=CLi+1) begin
        rate[CurencyList[CLi]] = 1;
        crn = CurencyList[CLi];
        td = curdate;
        fr = 0; to1 = 0; to2 = 0; b1 = 0; b2 = 0;
        GetFullCurncyRate(crn,td,fr,to1,to2,b1,b2);
        rate[CurencyList[CLi]] = to1/fr;
        if (rate[CurencyList[CLi]]==0) then begin
          rate[CurencyList[CLi]] = 1;
        end;
        for (OLi=0;OLi<ObjectList.length;OLi=OLi+1) begin
          t = CurencyList[CLi] & ":" & ObjectList[OLi];
          corr[t] = saldo[accnumber[ai] & ":" & t & ":incur"]*rate[CurencyList[CLi]] - saldo[accnumber[ai] & ":" & t];
          if (corr[t]!=0) then begin
            COList[COi] = t;
            COi = COi +1;
          end;
        end;
      end;
      if (COi>0) then begin
        RecordClear(corrTRr);
        RecordNew(corrTRr);
        corrTRr.TransDate = curdate;
        corrTRr.IntYc = serviceIntYc;
        corrTRr.Number = corrTRrNum;
        corrTRrNum = corrTRrNum + 1;
        corrTRr.Comment = comment;
        corrTRr.RegDate = CurrentDate;
        corrTRr.RegTime = CurrentTime;
        for (i=0;i<COi;i=i+1) begin
          if (corr[COList[i]]!=blankval) and (corr[COList[i]]!=0) then begin
            crn = "";
            objstore = "";
            pos = 0;
            ExtractObjWithSeparator(":",COList[i],true,pos,crn);
            ExtractObjWithSeparator(":",COList[i],true,pos,objstore);
            
            ClearRow(corrTRr,corrTRrw,1);
            rownr = MatRowCnt(corrTRr);
            corrTRrw.AccNumber = accnumber[ai];
            MatRowInsert(corrTRr,rownr,corrTRrw);
            TRVc_PasteAccNumber(corrTRr,1,rownr,true);
            MatRowGet(corrTRr,rownr,corrTRrw);
            corrTRrw.Curncy = crn;
            corrTRrw.Objects = objstore;
            if (corr[COList[i]]>0) then begin
              corrTRrw.DebVal = corr[COList[i]];
              corrTRrw.CurDebVal = 0;
            end else begin
              corrTRrw.CredVal = -corr[COList[i]];
              corrTRrw.CurCredVal = 0;
            end;
            MatRowPut(corrTRr,rownr,corrTRrw);
            
            ClearRow(corrTRr,corrTRrw,1);
            rownr = MatRowCnt(corrTRr);
            corrTRrw.AccNumber = "84/03";
            MatRowInsert(corrTRr,rownr,corrTRrw);
            TRVc_PasteAccNumber(corrTRr,1,rownr,true);
            MatRowGet(corrTRr,rownr,corrTRrw);
            corrTRrw.Curncy = bcur.BaseCur1;
            corrTRrw.Objects = objstore;
            if (corr[COList[i]]>0) then begin
              corrTRrw.CredVal = round(corr[COList[i]],SetRoundModeD(2));
              corrTRrw.CurCredVal = corrTRrw.CredVal;
            end else begin
              corrTRrw.DebVal = -corr[COList[i]];
              corrTRrw.CurDebVal = corrTRrw.DebVal;
            end;
            MatRowPut(corrTRr,rownr,corrTRrw);
          end;
        end;
        TRSumup(corrTRr,tmpval);
        RecordInsert(corrTRr,true);
        rwcnt = MatRowCnt(corrTRr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(corrTRr,i,corrTRrw);
          if ((corrTRrw.AccNumber == accnumber[ai]) and (corrTRrw.ovst <> 1) and (corrTRrw.stp==1)) then begin
            objstore= "";
            GetObjs("STORE",corrTRrw.Objects,objstore);
            if (!ObjInArr[objstore]) then begin
              ObjectList[OLi] = objstore;
              ObjInArr[ObjectList[OLi]] = true;
              OLi = OLi + 1;
            end;
            if (!CurInArr[corrTRrw.Curncy]) then begin
              CurencyList[CLi] = corrTRrw.Curncy;
              CurInArr[CurencyList[CLi]] = true;
              CLi = CLi + 1;
            end;
            saldo[accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore] = saldo[accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore] + corrTRrw.DebVal - corrTRrw.CredVal;
            saldo[accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore & ":incur"] = saldo[accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore & ":incur"] + corrTRrw.CurDebVal - corrTRrw.CurCredVal;
          end;
        end;
        COi = 0;
      end;
      curdate = AddDay(curdate,1);
    end;
  end;
  
  return;
end;

global
updating procedure DeleteServiceTRMn(record RcVc RepSpec)
begin
  boolean TrHs;
  record TRVc TRr;
  integer serviceIntYc;
  
  serviceIntYc = 300;
  
  TRr.IntYc = serviceIntYc;
  resetloop(TRr);
  TrHs = true;
  while(loopmain(TRr,1,TrHs)) begin
    if (TRr.IntYc==serviceIntYc) then begin
      DeleteTransaction(TRr.Number,TRr.IntYc);
      stepback(TRr);
    end;
  end;
  
  return;
end;