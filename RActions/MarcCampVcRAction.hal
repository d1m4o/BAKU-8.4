external function Boolean CustomerWithPhoneExists(record CUVc,var string, var string);// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 20 August 2018 16:41:05
external function Boolean CustomerWithEmailExists(string,string);// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 20 August 2018 16:41:05
external updating procedure CopyLoyaltyBalanceToNewCard(var record LoyaltyCardVc); //Edit***************************Sasha2,12:19 23.05.2017
external updating procedure CreateLoyaltyCardRemote(record CUVc,var record LoyaltyCardVc);// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 4 January 2018 12:28:35

global webpublic updating procedure WebCreateMarcCamp()
begin
	area getpost;
	json jsresponse;
	record MarcCampVc MCr;
	date dat;
	integer cpmpnr;
	area areq;
	
	webgetpostdata(getpost);
	jsresponse = ParseJSONArea(getpost);
	if(nonblank(JSONGet(jsresponse,"hansaId")))then begin
		if(nonblank(JSONGet(jsresponse,"compnr")))then begin
			cpmpnr = stringtoint(JSONGet(jsresponse,"compnr"));
			if(cpmpnr>0 and cpmpnr<29)then begin
				setcompany(cpmpnr,false);
				MCr.Code = JSONGet(jsresponse,"hansaId");
				if(readfirstmain(MCr,1,true)==false)then begin
					if(nonblank(JSONGet(jsresponse,"proposedStartDate")) and nonblank(JSONGet(jsresponse,"proposedEndDate")))then begin
						recordnew(MCr);
						MCr.Code = JSONGet(jsresponse,"hansaId");
						MCr.Page = 1;
						MCr.Name = JSONGet(jsresponse,"campaignName");
						dat.year = stringtoint(left(JSONGet(jsresponse,"proposedStartDate"),4));
						dat.day = stringtoint(right(JSONGet(jsresponse,"proposedStartDate"),2));
						dat.month = stringtoint(mid(JSONGet(jsresponse,"proposedStartDate"),5,2));
						MCr.sDate = dat;
						dat.year = stringtoint(left(JSONGet(jsresponse,"proposedEndDate"),4));
						dat.day = stringtoint(right(JSONGet(jsresponse,"proposedEndDate"),2));
						dat.month = stringtoint(mid(JSONGet(jsresponse,"proposedEndDate"),5,2));
						MCr.eDate = dat;
						dat.year = stringtoint(left(JSONGet(jsresponse,"actualStartDate"),4));
						dat.day = stringtoint(right(JSONGet(jsresponse,"actualStartDate"),2));
						dat.month = stringtoint(mid(JSONGet(jsresponse,"actualStartDate"),5,2));
						MCr.RealsDate = dat;
						dat.year = stringtoint(left(JSONGet(jsresponse,"actualEndDate"),4));
						dat.day = stringtoint(right(JSONGet(jsresponse,"actualEndDate"),2));
						dat.month = stringtoint(mid(JSONGet(jsresponse,"actualEndDate"),5,2));
						MCr.RealeDate = dat;
						recordstore(MCr,true);
						AddRecordToArea(MCr,"MarcCampVc",areq);
						WebOutArea(areq);
					end else begin
						weboutstring("{\"error\":\"Date range incorrect\"}");
					end;
				end else begin
					weboutstring("{\"error\":\"Record already exist\"}");
				end;
			end else begin
				weboutstring("{\"error\":\"compnr is wrong\"}");
			end;
		end else begin
			weboutstring("{\"error\":\"compnr is blank\"}");
		end;
	end else begin
		weboutstring("{\"error\":\"hansaId is blank\"}");
	end;
return;
end;


global webpublic updating procedure WebCreateConsultant()
begin
	record UserVc USr;
	record CUVc CUr;
	area getpost;
	json jsresponse;
	boolean foundf;
	string 100 tstr,field;
	date birthdate;
	record CompaniesBlock CBb;
	row CompaniesBlock CBrw;
	integer mtrw,i;
	record LocationVc Locr;
	
	logtext(0,"WebCreateConsultant");
	
	webgetpostdata(getpost);
	
	
	jsresponse = ParseJSONArea(getpost);
	if(nonblank(JSONGet(jsresponse,"hansaId")))then begin
		if(nonblank(JSONGet(jsresponse,"shopId")))then begin
			blockload(CBb);		
			mtrw = matrowcnt(CBb);
			For(i=0;i<mtrw;i=i+1) begin
	  		matrowget(CBb,i,CBrw);
	  		setcompany(i+1,true);
	  		Locr.Code = "";
	  		resetloop(Locr);
	  		while(loopmain(Locr,1,true))begin
	  			if(Locr.Code==JSONGet(jsresponse,"shopId"))then begin
	  				USr.Code = JSONGet(jsresponse,"hansaId");
	  				if(readfirstmain(USr,1,true)==false)then begin
	  					if(nonblank(JSONGet(jsresponse,"firstName")))then begin
								recordnew(USr);
									USr.Code = left(JSONGet(jsresponse,"hansaId"),10);
									USr.Name = JSONGet(jsresponse,"firstName") & " " & JSONGet(jsresponse,"lastName");
									USr.AccessGroup = "DENY";
									USr.TypeOfUser = kTypeOfUserConcurrent;
									USr.StartLevel = 1;
									USr.IsSalesMan = 1;
									USr.Phone1 = JSONGet(jsresponse,"mainPhone");
									USr.Phone2 = JSONGet(jsresponse,"mobilePhone");
									USr.emailAddr = JSONGet(jsresponse,"email");
									weboutstring("{\"id\":\"" & USr.Code & "\"}");
								recordStore(USr,true);
								goto lWebCreateConsultant;
	  					end else begin
	  						weboutstring("{\"error\":\"Blank first name\"}");
	  					end;
	  				end else begin
	  					weboutstring("{\"error\":\"Consultant exist\"}");
	  				end;
	  			end;
	  		end;
			end; 
		end else begin
			weboutstring("{\"error\":\"hansaId is shopId\"}");
		end;
	end else begin
		weboutstring("{\"error\":\"hansaId is blank\"}");
	end;

lWebCreateConsultant:;
resetcompany(1);

return;
end;


global webpublic updating procedure WebUpdateConsultant()
begin
	record UserVc USr;
	record CUVc CUr;
	area getpost;
	json jsresponse;
	boolean foundf;
	string 100 tstr,field;
	date birthdate;
	record CompaniesBlock CBb;
	row CompaniesBlock CBrw;
	integer mtrw,i;
	record LocationVc Locr;
	
	logtext(0,"WebCreateConsultant");
	
	webgetpostdata(getpost);
	
	
	jsresponse = ParseJSONArea(getpost);
	if(nonblank(JSONGet(jsresponse,"hansaId")))then begin
		if(nonblank(JSONGet(jsresponse,"shopId")))then begin
			blockload(CBb);		
			mtrw = matrowcnt(CBb);
			For(i=0;i<mtrw;i=i+1) begin
	  		matrowget(CBb,i,CBrw);
	  		setcompany(i+1,true);
	  		Locr.Code = "";
	  		resetloop(Locr);
	  		while(loopmain(Locr,1,true))begin
	  			if(Locr.Code==JSONGet(jsresponse,"shopId"))then begin
	  				USr.Code = JSONGet(jsresponse,"hansaId");
	  				if(readfirstmain(USr,1,true))then begin
	  					if(nonblank(JSONGet(jsresponse,"firstName")))then begin
								USr.Name = JSONGet(jsresponse,"firstName") & " " & JSONGet(jsresponse,"lastName");
								USr.Phone1 = JSONGet(jsresponse,"mainPhone");
								USr.Phone2 = JSONGet(jsresponse,"mobilePhone");
								USr.emailAddr = JSONGet(jsresponse,"email");
								weboutstring("{\"id\":\"" & USr.Code & "\"}");
								recordStore(USr,true);
								goto lWebUpdateConsultant;
	  					end else begin
	  						weboutstring("{\"error\":\"Blank first name\"}");
	  					end;
	  				end else begin
	  					weboutstring("{\"error\":\"Consultant not exist\"}");
	  				end;
	  			end;
	  		end;
			end; 
		end else begin
			weboutstring("{\"error\":\"hansaId is shopId\"}");
		end;
	end else begin
		weboutstring("{\"error\":\"hansaId is blank\"}");
	end;

lWebUpdateConsultant:;
resetcompany(1);

return;
end;

global webpublic updating procedure WebCreateLoyaltyCard()
begin
	record LoyaltyCardVc LCr;
	record CUVc CUr;
	area getpost;
	json jsresponse;
	boolean foundf;
	string 100 tstr,field;
	date birthdate;
	
	logtext(0,"WebCreateLoyCard");
	
	webgetpostdata(getpost);
	
	jsresponse = ParseJSONArea(getpost);
	if(nonblank(JSONGet(jsresponse,"hansaId")))then begin
		LCr.SerNr = JSONGet(jsresponse,"hansaId");
		if(readfirstmain(LCr,1,true)==false)then begin
			logtext(0,"Cont " & JSONGet(jsresponse,"contact"));
			CUr.Code = JSONGet(jsresponse,"contact");
			if(readfirstmain(CUr,1,true))then begin
				recordnew(LCr);
					CreateLoyaltyCardRemote(CUr,LCr);
					LCr.SerNr = JSONGet(jsresponse,"hansaId");
					LCr.CustCode = JSONGet(jsresponse,"contact");
					LCr.LCMLevel = JSONGet(jsresponse,"loyaltyProgramId");
					LCr.StartDate = currentdate;
					CopyLoyaltyBalanceToNewCard(LCr);
				recordstore(LCr,true);
				weboutstring("{\"id\":\"" & LCr.SerNr & "\"}");
			end else begin
				weboutstring("{\"error\":\"Customer not found\"}");
			end;
		end else begin
			weboutstring("{\"error\":\"Card already created\"}");
		end;			
	end;
return;
end;

global webpublic updating procedure WebUpdateLoyaltyCard()
begin
	record LoyaltyCardVc LCr;
	record CUVc CUr;
	area getpost;
	json jsresponse;
	boolean foundf;
	string 100 tstr,field;
	date birthdate;
	
	logtext(0,"WebUpdateLoyCard");
	
	webgetpostdata(getpost);
	
	jsresponse = ParseJSONArea(getpost);
	if(nonblank(JSONGet(jsresponse,"hansaId")))then begin
		LCr.SerNr = JSONGet(jsresponse,"hansaId");
		if(readfirstmain(LCr,1,true))then begin
			LCr.SerNr = JSONGet(jsresponse,"hansaId");
			LCr.LCMLevel = JSONGet(jsresponse,"loyaltyProgramId");
			recordstore(LCr,true);
			weboutstring("{\"id\":\"" & LCr.SerNr & "\"}");
		end else begin
			weboutstring("{\"error\":\"Card not found\"}");
		end;			
	end;
return;
end;


global webpublic updating procedure WebCreateCustomer()
begin
	record CUVc CUr;
	area getpost;
	json jsresponse;
	boolean foundf;
	string 100 tstr,field;
	date birthdate;
	
	logtext(0,"WebCreateCustomer");
	
	webgetpostdata(getpost);
	
	jsresponse = ParseJSONArea(getpost);
	if(nonblank(JSONGet(jsresponse,"id")))then begin
		CUr.ANACode = JSONGet(jsresponse,"id");
		if(readfirstkey("ANACode",CUr,1,true)==false)then begin
			CUr.Phone = JSONGet(jsresponse,"mobilePhone1");
			if(readfirstkey("Phone",CUr,1,true))then begin
				foundf = true;
			end;
			
			CUr.Phone = JSONGet(jsresponse,"mobilePhone1");
			CUr.Mobile = JSONGet(jsresponse,"mobilePhone2");
			CUr.AltPhone = JSONGet(jsresponse,"mobilePhone3");
			if(CustomerWithPhoneExists(CUr,tstr,field))then begin
				weboutstring("{\"error\":\" Customer with phone exists" & field & "\"}");
			end else begin
				if(CustomerWithEmailExists("",JSONGet(jsresponse,"mainEmail")))then begin
					weboutstring("{\"error\":\"Customer with e-Mail exist\"}");
				end else begin
					recordnew(CUr);
					CUr.Code = JSONGet(jsresponse,"mobilePhone1");
					CUr.Name = JSONGet(jsresponse,"firstName") & " " & JSONGet(jsresponse,"lastName");
					CUr.Phone = JSONGet(jsresponse,"mobilePhone1");
					CUr.Mobile = JSONGet(jsresponse,"mobilePhone2");
					CUr.AltPhone = JSONGet(jsresponse,"mobilePhone3");
					CUr.eMail = JSONGet(jsresponse,"mainEmail");
					birthdate.year = stringtoint(left(JSONGet(jsresponse,"birthday"),4));
					birthdate.day = stringtoint(right(JSONGet(jsresponse,"birthday"),2));
					birthdate.month = stringtoint(mid(JSONGet(jsresponse,"birthday"),5,2));
					CUr.BirthDate = birthdate;
					CUr.ANACode = JSONGet(jsresponse,"id");
					CUr.RebCode = "0%";
					CUr.PLCode = "RRP";
					recordinsert(CUr,true);
					weboutstring("{\"id\":\"" & CUr.Code & "\"}");
				end;
			end;
		end else begin
			weboutstring("{\"error\":\"Customer already created\"}");
		end;
	end;
return;
end;

global webpublic updating procedure WebUpdateCustomer()
begin
	record CUVc CUr,oldCUr;
	area getpost;
	json jsresponse;
	boolean foundf;
	string 100 tstr,field;
	date birthdate;
	
	logtext(0,"WebUpdateCustomer");
	
	webgetpostdata(getpost);
	
	jsresponse = ParseJSONArea(getpost);
	if(nonblank(JSONGet(jsresponse,"hansaId")))then begin
		CUr.Code = JSONGet(jsresponse,"hansaId");
		if(readfirstkey("Code",CUr,1,true)==true)then begin
			recordcopy(oldCUr,CUr);
			CUr.Name = JSONGet(jsresponse,"firstName") & " " & JSONGet(jsresponse,"lastName");
			CUr.Phone = JSONGet(jsresponse,"mobilePhone1");
			CUr.Mobile = JSONGet(jsresponse,"mobilePhone2");
			CUr.AltPhone = JSONGet(jsresponse,"mobilePhone3");
			CUr.eMail = JSONGet(jsresponse,"mainEmail");
			birthdate.year = stringtoint(left(JSONGet(jsresponse,"birthday"),4));
			birthdate.day = stringtoint(right(JSONGet(jsresponse,"birthday"),2));
			birthdate.month = stringtoint(mid(JSONGet(jsresponse,"birthday"),5,2));
			CUr.BirthDate = birthdate;
			if(recordupdate(oldCUr,CUr,true)==0)then begin
				weboutstring("{\"id\":\"" & CUr.Code & "\"}");
			end	else begin
				weboutstring("{\"error\":\"Can't update Customer\"}");
			end;
			
		end else begin
			weboutstring("{\"error\":\"Customer not exist\"}");
		end;
	end;
return;
end;


global updating procedure SednMarcCampVcToCRM(var record MarcCampVc MCr)
begin
	integer err,noErr;
  string 255 host,tstr,nonce,opaque,page;
  LongInt port,pos,mtrw;
  Area req,reply;
  string 255 ha1,ha2;
  row MarcCampVc MCrw;
  integer i;
  
  host = "93.88.82.42";
  page = "/api/MarketingCampaign/Create";
  port = 8087;
	
	addtexttoarea("POST " & page & " HTTP/1.0" & chr(13) & chr(10),req);
	addtexttoarea("host: " & host & chr(13) & chr(10),req);
	addtexttoarea("Content-Type: application/json" & chr(13) & chr(10),req);
	addtexttoarea(chr(13) & chr(10),req);
	
	addtexttoarea("{" & chr(13) & chr(10),req);
	addtexttoarea("\"name\":\"" & MCr.Name & "\"," & chr(13) & chr(10),req);
	addtexttoarea("\"proposedStartDate\":"  & "\"" & DateToString(MCr.sDate,"YYYY.MM.DD") & "\"," & chr(13) & chr(10),req);
	addtexttoarea("\"proposedEndDate\":"  & "\"" & DateToString(MCr.eDate,"YYYY.MM.DD") & "\"," & chr(13) & chr(10),req);
	addtexttoarea("\"actualStartDate\":"  & "\"" & DateToString(MCr.RealsDate,"YYYY.MM.DD") & "\"," & chr(13) & chr(10),req);
	
	addtexttoarea("\"actualEndDate\":"  & "\"" & DateToString(MCr.RealeDate,"YYYY.MM.DD") & "\"," & chr(13) & chr(10),req);
	mtrw = matrowcnt(MCr);
	if(mtrw>0)then begin
		addtexttoarea("\"productList\":[" & chr(13) & chr(10),req);
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(MCr,i,MCrw);
			if(i==mtrw-1)then begin
				addtexttoarea("{\"hansaId\":\"" & MCrw.ItemCode & "\"," & chr(13) & chr(10),req);
				addtexttoarea("\"name\":\"" & MCrw.Name & "\"}" & chr(13) & chr(10),req);
			end else begin
				addtexttoarea("{\"hansaId\":\"" & MCrw.ItemCode & "\"," & chr(13) & chr(10),req);
				addtexttoarea("\"name\":\"" & MCrw.Name & "\"}," & chr(13) & chr(10),req);
			end;
		end; 
		addtexttoarea("]," & chr(13) & chr(10),req);
	end;
	addtexttoarea("\"hansaId\":" & "\"" & MCr.Code & "\"" & chr(13) & chr(10),req);
	addtexttoarea("}" & chr(13) & chr(10),req);
	
	writeareatofile(req,"CRMRequest.txt",0);
	if (SendRawWebRequest(host,port,false,"POST",page,"application/json","",false,req,reply,10)) then begin
		writeareatofile(reply,"CRMResponse.txt",0);
  end;

return;
end;

global updating procedure SednConsultantToCRM(var record UserVc USr)
begin
	integer err,noErr;
  string 255 host,tstr,nonce,opaque,page;
  LongInt port,pos,mtrw;
  Area req,reply;
  string 255 ha1,ha2;
  row MarcCampVc MCrw;
  integer i;
  json jsresponse;
  
  host = "93.88.82.42";
  page = "/api/Contact/Create";
  port = 8087;
	
	//addtexttoarea("POST " & page & " HTTP/1.0" & chr(13) & chr(10),req);
	//addtexttoarea("host: " & host & chr(13) & chr(10),req);
	//addtexttoarea("Content-Type: application/json" & chr(13) & chr(10),req);
	//addtexttoarea(chr(13) & chr(10),req);
	
	addtexttoarea("{" & chr(13) & chr(10),req);
	addtexttoarea("\"firstName\":\"" & USr.Name & "\"," & chr(13) & chr(10),req);
	addtexttoarea("\"lastName\":"  & "\"\"," & chr(13) & chr(10),req);
	addtexttoarea("\"landlineNumber\":"  & "\"\"," & chr(13) & chr(10),req);
	addtexttoarea("\"mainEmail\":"  & "\"\"," & chr(13) & chr(10),req);
	addtexttoarea("\"addEmail\":"  & "\"\"," & chr(13) & chr(10),req);
	addtexttoarea("\"mobilePhone1\":" & "\"\"," & chr(13) & chr(10),req);
	addtexttoarea("\"mobilePhone2\":" & "\"\"," & chr(13) & chr(10),req);
	addtexttoarea("\"mobilePhone3\":" & "\"\"," & chr(13) & chr(10),req);
	addtexttoarea("\"birthday\":" & "\"\"," & chr(13) & chr(10),req);
	addtexttoarea("\"id\":" & "\"\"," & chr(13) & chr(10),req);
	addtexttoarea("\"hansaId\":" & "\"" & USr.Code & "\"" & chr(13) & chr(10),req);
	addtexttoarea("}" & chr(13) & chr(10),req);
	
	writeareatofile(req,"CRMRequest.txt",0);
	SendWebRequest(host,port,-1,false,"POST",page,"application/json","",false,req,reply,10);
	if(getarealength(reply)>0)then begin
		jsresponse = ParseJSONArea(reply);
		if(nonblank(JSONGet(jsresponse,"result")))then begin
			USr.CRMid = JSONGet(jsresponse,"result");
		end;
	end;
	//if (SendRawWebRequest(host,port,false,"POST",page,"application/json","",false,req,reply,10)) then begin
		
  //end;
	writeareatofile(reply,"CRMResponse.txt",0);
return;
end;

global updating procedure SednDelConsultantToCRM(var record UserVc USr)
begin
	integer err,noErr;
  string 255 host,tstr,nonce,opaque,page;
  LongInt port,pos,mtrw;
  Area req,reply;
  string 255 ha1,ha2;
  row MarcCampVc MCrw;
  integer i;
  json jsresponse;
  
  host = "93.88.82.42";
  page = "/api/Contact/Delete";
  port = 8087;
	
	/*addtexttoarea("{" & chr(13) & chr(10),req);
	addtexttoarea("\"id\":\"" & USr.CRMid & "\"" & chr(13) & chr(10),req);
	addtexttoarea("}" & chr(13) & chr(10),req);
	*/
	writeareatofile(req,"CRMRequest.txt",0);
	SendWebRequest(host,port,-1,false,"DELETE",page & "?id=" & USr.CRMid,"application/json","id",false,req,reply,10);
	if(getarealength(reply)>0)then begin
		jsresponse = ParseJSONArea(reply);
		if(JSONGet(jsresponse,"result")==USr.CRMid)then begin
			USr.CRMid = "";
		end;
		//USr.CRMid = "";
	end;
	//if (SendRawWebRequest(host,port,false,"POST",page,"application/json","",false,req,reply,10)) then begin
		
  //end;
	writeareatofile(reply,"CRMResponse.txt",0);
return;
end;

global
updating function LongInt MarcCampVcRecordCheck(var record MarcCampVc MCr,record MarcCampVc MC2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  date bldate;
  
  res = 0;
  
  if(MCr.eDate<MCr.sDate)then begin
  	MCr.eDate = bldate;
  end;
  if(MCr.RealeDate<MCr.RealsDate)then begin
  	MCr.RealeDate = bldate;
  end;
  
  if(blankdate(MCr.sDate)) then begin
    RecordCheckError(1058,"",-1,"sDate");
    res = -1;
    goto LMarcCampVcRecordCheck;    
  end; 
  if(blankdate(MCr.eDate)) then begin
    RecordCheckError(1058,"",-1,"eDate");
    res = -1;
    goto LMarcCampVcRecordCheck;    
  end; 
  if(blankdate(MCr.RealsDate)) then begin
    RecordCheckError(1058,"",-1,"RealsDate");
    res = -1;
    goto LMarcCampVcRecordCheck;    
  end; 
  if(blankdate(MCr.RealeDate)) then begin
    RecordCheckError(1058,"",-1,"RealeDate");
    res = -1;
    goto LMarcCampVcRecordCheck;    
  end; 
  
  SednMarcCampVcToCRM(MCr);
  
  LMarcCampVcRecordCheck:;
  
  MarcCampVcRecordCheck = res;
  RETURN;
END;
