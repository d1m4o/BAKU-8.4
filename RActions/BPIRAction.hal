external function LongInt GetCurUserLastNr(string);external procedure NextM4Number(string,var string);remote procedure OSDSumUp(var record OSDVc);remote procedure NextM4SerialNumber(string,var string);//9:51 02.10.2018SetLangMode(LangRussian,"RUS",0);globalupdating function LongInt BPIBrandVcRecordCheck(var record BPIBrandVc BPIr,record BPIBrandVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  integer err,noErr;  string 255 host,tstr,nonce,opaque,page;  LongInt port,pos,mtrw;  Area req,reply;  string 255 ha1,ha2;  row MarcCampVc MCrw;  integer i;  json jsresponse;	record WebReportChBlock WRChb;	record GlobalBrandsVc BGr,oldBGr;	record GlobalClassificationsVc BCr,oldBCr;		if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "BRAND";			recordstore(BCr,true);		end;		end;		if(stat==Rs_update)then begin		BGr.Code = BPIr.Code;		if(readfirstmain(BGr,1,true))then begin			recordcopy(oldBGr,BGr);			BGr.Name = BPIr.Name;			recordupdate(oldBGr,BGr,true);		end else begin			BGr.Code = BPIr.Code;			BGr.Name = BPIr.Name;			recordStore(BGr,true);		end;	end;	if(stat==Rs_insert)then begin		recordnew(BGr);		BGr.Code = BPIr.Code;		BGr.Name = BPIr.Name;		recordStore(BGr,true);	end;		blockload(WRChb);				res = 0;	    BPIBrandVcRecordCheck = res;return;end;globalupdating function LongInt BPICollectionVcRecordCheck(var record BPICollectionVc BPIr,record BPICollectionVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  integer err,noErr;  string 255 host,tstr,nonce,opaque,page;  LongInt port,pos,mtrw;  Area req,reply;  string 255 ha1,ha2;  row MarcCampVc MCrw;  integer i;  json jsresponse;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	LongInt errcode;	record BPICollectionVc oldCollectr;	boolean TrHs;	string 255 OldCode;			if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "COLLECT";			recordstore(BCr,true);		end;		end;	res = 0;			if(blank(BPIr.Name)) then begin		res=-1;		goto LBPICollectionVcRecordCheck;	end;	oldCollectr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldCollectr,1,true))then begin		MessageBox(0,"Классификация с таким именем уже существует");		res = -1;		goto LBPICollectionVcRecordCheck;	end;	if(blank(BPIr.Code))then begin		oldCollectr.Code = "COLL99999";		TrHs = true;		while (LoopBackKey("Code",oldCollectr,1,TrHs)) begin			OldCode = oldCollectr.Code;			TrHs = false;		end;		ResetLoop(oldCollectr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;				blockload(WRChb);		if(WRChb.WEBCheck==1)then begin		if(stat==Rs_update)then begin					host = "192.168.3.11";			page = "/api/ProductCategory/Update";			port = 8087;									addtexttoarea("{" & chr(13) & chr(10),req);			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"type\":\"" & "COLLECT" & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"id\":" & "\"" & BPIr.CRMid & "\"," & chr(13) & chr(10),req);			addtexttoarea("}" & chr(13) & chr(10),req);					writeareatofile(req,"CRMRequest.txt",1);			SendWebRequest(host,port,-1,false,"PATCH",page,"application/json","",false,req,reply,10);			if(getarealength(reply)>0)then begin				jsresponse = ParseJSONArea(reply);				if(nonblank(JSONGet(jsresponse,"result")))then begin					logtext(0,"SendUpdateBrandToCRM " & JSONGet(jsresponse,"result"));				end;			end;			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);writeareatofile(reply,"CRMResponse.txt",1);				end;		if(stat==Rs_insert)then begin						host = "192.168.3.11";			page = "/api/ProductCategory/Create";			port = 8087;					addtexttoarea("{" & chr(13) & chr(10),req);			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"type\":\"" & "COLLECT" & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"hansaId\":" & "\"" & BPIr.Code & "\"" & chr(13) & chr(10),req);			addtexttoarea("}" & chr(13) & chr(10),req);					writeareatofile(req,"CRMRequest.txt",1);			SendWebRequest(host,port,-1,false,"POST",page,"application/json","",false,req,reply,10);			if(getarealength(reply)>0)then begin				jsresponse = ParseJSONArea(reply);				if(nonblank(JSONGet(jsresponse,"result")))then begin					BPIr.CRMid = JSONGet(jsresponse,"result");					logtext(0,"BPIBrandVcRecordCheck " & BPIr.CRMid);				end;			end;			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);writeareatofile(reply,"CRMResponse.txt",1);				end;	end;  LBPICollectionVcRecordCheck:;  BPICollectionVcRecordCheck = res;return;end;globalupdating function LongInt BPIGroupVcRecordCheck(var record BPIGroupVc BPIr,record BPIGroupVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  integer err,noErr;  string 255 host,tstr,nonce,opaque,page;  LongInt port,pos,mtrw;  Area req,reply;  string 255 ha1,ha2;  row MarcCampVc MCrw;  integer i;	boolean TrHs;  json jsresponse;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPIGroupVc oldGroupr;	string 255 OldCode;		if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "GROUP";			recordstore(BCr,true);		end;		end;	res = 0;	blockload(WRChb);				res = 0;		if(blank(BPIr.Name)) then begin		res=-1;		goto GroupRecordCheckEnd;	end;	oldGroupr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldGroupr,1,true))then begin		MessageBox(0,"группа с таким именем уже существует");		res = -1;		goto GroupRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldGroupr.Code = "GROUP99999";		TrHs = true;		while (LoopBackKey("Code",oldGroupr,1,TrHs)) begin			OldCode = oldGroupr.Code;			TrHs = false;		end;		ResetLoop(oldGroupr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;			if(WRChb.WEBCheck==1)then begin		if(stat==Rs_update)then begin					host = "192.168.3.11";			page = "/api/ProductCategory/Update";			port = 8087;									addtexttoarea("{" & chr(13) & chr(10),req);			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"type\":\"" & "GROUP" & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"id\":" & "\"" & BPIr.CRMid & "\"," & chr(13) & chr(10),req);			addtexttoarea("}" & chr(13) & chr(10),req);					writeareatofile(req,"CRMRequest.txt",1);			SendWebRequest(host,port,-1,false,"PATCH",page,"application/json","",false,req,reply,10);			if(getarealength(reply)>0)then begin				jsresponse = ParseJSONArea(reply);				if(nonblank(JSONGet(jsresponse,"result")))then begin					logtext(0,"BPIGroupVcRecordCheck " & JSONGet(jsresponse,"result"));				end;			end;			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);writeareatofile(reply,"CRMResponse.txt",1);				end;		if(stat==Rs_insert)then begin						host = "192.168.3.11";			page = "/api/ProductCategory/Create";			port = 8087;					addtexttoarea("{" & chr(13) & chr(10),req);			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"type\":\"" & "GROUP" & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"hansaId\":" & "\"" & BPIr.Code & "\"" & chr(13) & chr(10),req);			addtexttoarea("}" & chr(13) & chr(10),req);					writeareatofile(req,"CRMRequest.txt",1);			SendWebRequest(host,port,-1,false,"POST",page,"application/json","",false,req,reply,10);			if(getarealength(reply)>0)then begin				jsresponse = ParseJSONArea(reply);				if(nonblank(JSONGet(jsresponse,"result")))then begin					BPIr.CRMid = JSONGet(jsresponse,"result");					logtext(0,"BPIGroupVcRecordCheck " & BPIr.CRMid);				end;			end;			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);writeareatofile(reply,"CRMResponse.txt",1);				end;	end;  GroupRecordCheckEnd:;  BPIGroupVcRecordCheck = res;return;end;globalupdating function LongInt BPISubGroupVcRecordCheck(var record BPISubGroupVc BPIr,record BPISubGroupVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  integer err,noErr;  string 255 host,tstr,nonce,opaque,page;  LongInt port,pos,mtrw;  Area req,reply;  string 255 ha1,ha2;  row MarcCampVc MCrw;  integer i;	boolean TrHs;  json jsresponse;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPISubGroupVc oldSubGroupr;	string 255 OldCode;		if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "SUBGROUP";			recordstore(BCr,true);		end;		end;	res = 0;	blockload(WRChb);				res = 0;		if(blank(BPIr.Name)) then begin		res=-1;		goto SubGroupRecordCheckEnd;	end;	oldSubGroupr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldSubGroupr,1,true))then begin		MessageBox(0,"группа с таким именем уже существует");		res = -1;		goto SubGroupRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldSubGroupr.Code = "TYPE99999";		TrHs = true;		while (LoopBackKey("Code",oldSubGroupr,1,TrHs)) begin			OldCode = oldSubGroupr.Code;			TrHs = false;		end;		ResetLoop(oldSubGroupr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;			if(WRChb.WEBCheck==1)then begin		if(stat==Rs_update)then begin					host = "192.168.3.11";			page = "/api/ProductCategory/Update";			port = 8087;									addtexttoarea("{" & chr(13) & chr(10),req);			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"type\":\"" & "SUBGROUP" & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"id\":" & "\"" & BPIr.CRMid & "\"," & chr(13) & chr(10),req);			addtexttoarea("}" & chr(13) & chr(10),req);					writeareatofile(req,"CRMRequest.txt",1);			SendWebRequest(host,port,-1,false,"PATCH",page,"application/json","",false,req,reply,10);			if(getarealength(reply)>0)then begin				jsresponse = ParseJSONArea(reply);				if(nonblank(JSONGet(jsresponse,"result")))then begin					logtext(0,"BPIGroupVcRecordCheck " & JSONGet(jsresponse,"result"));				end;			end;			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);writeareatofile(reply,"CRMResponse.txt",1);				end;		if(stat==Rs_insert)then begin						host = "192.168.3.11";			page = "/api/ProductCategory/Create";			port = 8087;					addtexttoarea("{" & chr(13) & chr(10),req);			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"type\":\"" & "SUBGROUP" & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"hansaId\":" & "\"" & BPIr.Code & "\"" & chr(13) & chr(10),req);			addtexttoarea("}" & chr(13) & chr(10),req);					writeareatofile(req,"CRMRequest.txt",1);			SendWebRequest(host,port,-1,false,"POST",page,"application/json","",false,req,reply,10);			if(getarealength(reply)>0)then begin				jsresponse = ParseJSONArea(reply);				if(nonblank(JSONGet(jsresponse,"result")))then begin					BPIr.CRMid = JSONGet(jsresponse,"result");					logtext(0,"BPIGroupVcRecordCheck " & BPIr.CRMid);				end;			end;			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);writeareatofile(reply,"CRMResponse.txt",1);				end;	end;  SubGroupRecordCheckEnd:;  BPISubGroupVcRecordCheck = res;return;end;globalupdating function LongInt BPICategoryVcRecordCheck(var record BPICategoryVc BPIr,record BPICategoryVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPICategoryVc oldCatr;	string 255 OldCode;	boolean TrHs;	if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "CATEGORY";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto CategoryRecordCheckEnd;	end;	oldCatr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldCatr,1,true))then begin		MessageBox(0,"категория с таким именем уже существует");		res = -1;		goto CategoryRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldCatr.Code = "CAT99999";		TrHs = true;		while (LoopBackKey("Code",oldCatr,1,TrHs)) begin			OldCode = oldCatr.Code;			TrHs = false;		end;		ResetLoop(oldCatr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	CategoryRecordCheckEnd:;	BPICategoryVcRecordCheck = res;	return;end;globalupdating function LongInt BPIMaterialVcRecordCheck(var record BPIMaterialVc BPIr,record BPIMaterialVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPIMaterialVc oldMatr;	string 255 oldCode;	if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "MATERIAL";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto MaterialRecordCheckEnd;	end;		oldMatr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldMatr,1,true))then begin		MessageBox(0,"материал с таким именем уже существует");		res =-1;		goto MaterialRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldMatr.Code = "MATR99999";		TrHs = true;		while (LoopBackKey("Code",oldMatr,1,TrHs)) begin			OldCode = oldMatr.Code;			TrHs = false;		end;		ResetLoop(oldMatr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	MaterialRecordCheckEnd:;	BPIMaterialVcRecordCheck = res;	return;end;globalupdating function LongInt BPIColorVcRecordCheck(var record BPIColorVc BPIr,record BPIColorVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPIColorVc oldColr;	string 255 oldCode;		if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "COLOR";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto ColorRecordCheckEnd;	end;	oldColr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldColr,1,true))then begin		MessageBox(0,"цвет с таким именем уже существует");		res =-1;		goto ColorRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldColr.Code = "CL99999";		TrHs = true;		while (LoopBackKey("Code",oldColr,1,TrHs)) begin			OldCode = oldColr.Code;			TrHs = false;		end;		ResetLoop(oldColr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	ColorRecordCheckEnd:;	BPIColorVcRecordCheck = res;	return;end;globalupdating function LongInt BPIShapeVcRecordCheck(var record BPIShapeVc BPIr,record BPIShapeVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPIShapeVc oldShpr;	string 255 OldCode;		if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "SHAPE";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto ShapeRecordCheckEnd;	end;	oldShpr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldShpr,1,true))then begin		MessageBox(0,"shape с таким именем уже существует");		res =-1;		goto ShapeRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldShpr.Code = "SHAPE99999";		TrHs = true;		while (LoopBackKey("Code",oldShpr,1,TrHs)) begin			OldCode = oldShpr.Code;			TrHs = false;		end;		ResetLoop(oldShpr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	ShapeRecordCheckEnd:;	BPIShapeVcRecordCheck = res;	return;end;globalupdating function LongInt BPISizeVcRecordCheck(var record BPISizeVc BPIr,record BPISizeVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPISizeVc oldSizer;	string 255 OldCode;	if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "SIZE";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto SizeRecordCheckEnd;	end;	oldSizer.Name = BPIr.Name;	if(ReadFirstKey("Name",oldSizer,1,true))then begin		MessageBox(0,"size с таким именем уже существует");		res =-1;		goto SizeRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldSizer.Code = "SIZE99999";		TrHs = true;		while (LoopBackKey("Code",oldSizer,1,TrHs)) begin			OldCode = oldSizer.Code;			TrHs = false;		end;		ResetLoop(oldSizer);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	SizeRecordCheckEnd:;	BPISizeVcRecordCheck = res;	return;end;globalupdating function LongInt BPIUseVcRecordCheck(var record BPIUseVc BPIr,record BPIUseVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPIUseVc oldUser;	string 255 OldCode;		if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "USE";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto UseRecordCheckEnd;	end;	oldUser.Name = BPIr.Name;	if(ReadFirstKey("Name",oldUser,1,true))then begin		MessageBox(0,"Use с таким именем уже существует");		res =-1;		goto UseRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldUser.Code = "SIZE99999";		TrHs = true;		while (LoopBackKey("Code",oldUser,1,TrHs)) begin			OldCode = oldUser.Code;			TrHs = false;		end;		ResetLoop(oldUser);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	UseRecordCheckEnd:;	BPIUseVcRecordCheck = res;	return;end;globalupdating function LongInt BPISexVcRecordCheck(var record BPISexVc BPIr,record BPISexVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPISexVc oldSexr;	string 255 OldCode;		if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "SEX";			recordstore(BCr,true);		end;		end;			if(blank(BPIr.Name)) then begin		res=-1;		goto SexRecordCheckEnd;	end;	oldSexr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldSexr,1,true))then begin		MessageBox(0,"Пол с таким именем уже существует");// I think it isn't necessary;		res =-1;		goto SexRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldSexr.Code = "SEX99999";		TrHs = true;		while (LoopBackKey("Code",oldSexr,1,TrHs)) begin			OldCode = oldSexr.Code;			TrHs = false;		end;		ResetLoop(oldSexr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	SexRecordCheckEnd:;	BPISexVcRecordCheck = res;	return;end;globalupdating function LongInt BPIPlatingVcRecordCheck(var record BPIPlatingVc BPIr,record BPIPlatingVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPIPlatingVc oldPlr;	string 255 OldCode;		if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "PLATING";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto PlatingRecordCheckEnd;	end;		oldPlr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldPlr,1,true))then begin		MessageBox(0,"Plating с таким именем уже существует");		res =-1;		goto PlatingRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldPlr.Code = "PLAT99999";		TrHs = true;		while (LoopBackKey("Code",oldPlr,1,TrHs)) begin			OldCode = oldPlr.Code;			TrHs = false;		end;		ResetLoop(oldPlr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	PlatingRecordCheckEnd:;	BPIPlatingVcRecordCheck = res;	return;end;globalupdating function LongInt BPIClarityVcRecordCheck(var record BPIClarityVc BPIr,record BPIClarityVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPIClarityVc oldClarr;	string 255 OldCode;		if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "CLARITY";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto ClaringRecordCheckEnd;	end;	oldClarr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldClarr,1,true))then begin		MessageBox(0,"Claring с таким именем уже существует");		res =-1;		goto ClaringRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldClarr.Code = "CLAR99999";		TrHs = true;		while (LoopBackKey("Code",oldClarr,1,TrHs)) begin			OldCode = oldClarr.Code;			TrHs = false;		end;		ResetLoop(oldClarr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;	res = 0;	ClaringRecordCheckEnd:;	BPIClarityVcRecordCheck = res;	return;end;globalupdating function LongInt BPIWeightVcRecordCheck(var record BPIWeightVc BPIr,record BPIWeightVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPIWeightVc oldWghtr;	string 255 OldCode;	if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "WEIGHT";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto WeightRecordCheckEnd;	end;	oldWghtr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldWghtr,1,true))then begin		MessageBox(0,"Weight с таким именем уже существует");		res =-1;		goto WeightRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldWghtr.Code = "WGHT99999";		TrHs = true;		while (LoopBackKey("Code",oldWghtr,1,TrHs)) begin			OldCode = oldWghtr.Code;			TrHs = false;		end;		ResetLoop(oldWghtr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	WeightRecordCheckEnd:;	BPIWeightVcRecordCheck = res;	return;end;globalupdating function LongInt BPICutVcRecordCheck(var record BPICutVc BPIr,record BPICutVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPICutVc oldCutr;	string 255 OldCode;	if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "CUT";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto CutRecordCheckEnd;	end;	oldCutr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldCutr,1,true))then begin		MessageBox(0,"Cut с таким именем уже существует");		res =-1;		goto CutRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldCutr.Code = "CUT99999";		TrHs = true;		while (LoopBackKey("Code",oldCutr,1,TrHs)) begin			OldCode = oldCutr.Code;			TrHs = false;		end;		ResetLoop(oldCutr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	CutRecordCheckEnd:;	BPICutVcRecordCheck = res;	return;end;globalupdating function LongInt BPIStoneVcRecordCheck(var record BPIStoneVc BPIr,record BPIStoneVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPIStoneVc oldStoner;	string 255 OldCode;		if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "STONE";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto StoneRecordCheckEnd;	end;	oldStoner.Name = BPIr.Name;	if(ReadFirstKey("Name",oldStoner,1,true))then begin		MessageBox(0,"Stone с таким именем уже существует");		res =-1;		goto StoneRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldStoner.Code = "STN99999";		TrHs = true;		while (LoopBackKey("Code",oldStoner,1,TrHs)) begin			OldCode = oldStoner.Code;			TrHs = false;		end;		ResetLoop(oldStoner);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	StoneRecordCheckEnd:;	BPIStoneVcRecordCheck = res;	return;end;globalupdating function LongInt BPIStrapVcRecordCheck(var record BPIStrapVc BPIr,record BPIStrapVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPIStrapVc oldStrapr;	string 255 OldCode;	if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "STRAP";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin		res=-1;		goto StrapRecordCheckEnd;	end;	oldStrapr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldStrapr,1,true))then begin		MessageBox(0,"Strap с таким именем уже существует");		res =-1;		goto StrapRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldStrapr.Code = "STRP99999";		TrHs = true;		while (LoopBackKey("Code",oldStrapr,1,TrHs)) begin			OldCode = oldStrapr.Code;			TrHs = false;		end;		ResetLoop(oldStrapr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	StrapRecordCheckEnd:;	BPIStrapVcRecordCheck = res;	return;end;globalupdating function LongInt BPIOdourVcRecordCheck(var record BPIOdourVc BPIr,record BPIOdourVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  boolean TrHs;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;	record BPIOdourVc oldOdourr;	string 255 OldCode;		if(nonblank(BPIr.Code))then begin		BCr.Code = BPIr.Code;		if(readfirstmain(BCr,1,true))then begin			recordcopy(oldBCr,BCr);			BCr.Name = BPIr.Name;			recordupdate(oldBCr,BCr,true);		end else begin			BCr.Name = BPIr.Name;			BCr.Code = BPIr.Code;			BCr.Type = "ODOUR";			recordstore(BCr,true);		end;		end;		if(blank(BPIr.Name)) then begin	res=-1;	goto OdourRecordCheckEnd;	end;	oldOdourr.Name = BPIr.Name;	if(ReadFirstKey("Name",oldOdourr,1,true))then begin		MessageBox(0,"Odour с таким именем уже существует");		res =-1;		goto OdourRecordCheckEnd;	end;	if(blank(BPIr.Code))then begin		oldOdourr.Code = "ODR99999";		TrHs = true;		while (LoopBackKey("Code",oldOdourr,1,TrHs)) begin			OldCode = oldOdourr.Code;			TrHs = false;		end;		ResetLoop(oldOdourr);		NextM4SerialNumber(OldCode,BPIr.Code);	end;		res = 0;	OdourRecordCheckEnd:;	BPIOdourVcRecordCheck = res;	return;end;globalupdating function LongInt GlobalClassificationsVcRecordCheck(var record GlobalClassificationsVc BPIr,record GlobalClassificationsVc BPI2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  integer err,noErr;  string 255 host,tstr,nonce,opaque,page;  LongInt port,pos,mtrw;  Area req,reply;  string 255 ha1,ha2;  row MarcCampVc MCrw;  integer i;  json jsresponse;	record WebReportChBlock WRChb;	record GlobalClassificationsVc BCr,oldBCr;		res = 0;		blockload(WRChb);		if(WRChb.WEBCheck==1)then begin		if(stat==Rs_insert)then begin			host = "192.168.3.11";			page = "/api/ProductCategory/Create";			port = 8087;					addtexttoarea("{" & chr(13) & chr(10),req);			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"type\":\"" & BPIr.Type & "\"," & chr(13) & chr(10),req);			addtexttoarea("\"hansaId\":" & "\"" & BPIr.Code & "\"" & chr(13) & chr(10),req);			addtexttoarea("}" & chr(13) & chr(10),req);					writeareatofile(req,"CRMRequest.txt",1);			SendWebRequest(host,port,-1,false,"POST",page,"application/json","",false,req,reply,10);			if(getarealength(reply)>0)then begin				jsresponse = ParseJSONArea(reply);				if(nonblank(JSONGet(jsresponse,"result")))then begin					logtext(0,"GlobalClassificationsVcRecordCheck " & JSONGet(jsresponse,"result"));				end;			end;			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);writeareatofile(reply,"CRMResponse.txt",1);		end;	end;		GlobalClassificationsVcRecordCheck = res;	return;end;globalupdating function LongInt OSDVcRecordCheck(var record OSDVc OSDr,record OSDVc OSD2r,LongInt stat,LongInt long4) //Edit_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Anton 12:38 28.09.2018BEGIN	longint res,newnr;	record OSDVc OSDOldr;	string 255 OldSNr,NewSNr;	boolean TrHs;	row OSDVc OSDrw;	longint i, rwcnt, j;	record OSDSerialBock OSDSb;	row OSDSerialBock OSDSrw;	array string 255 aSeria;		res = 0;	if(false)then begin 		if(stat==Rs_update and OSD2r.OKFlag==1)then begin			res = -1;			MessageBox(0,"„окумент утвержден!");			goto LOSDVcRecordCheck;		end;	end;		if(blank(OSDr.Code))then begin		res = -1;		recordcheckerror(31006,"е не может быть пустым!",-1,"Code");		goto LOSDVcRecordCheck;		/*OSDOldr.Code = "ZZZZZZZZZZZZZZZZZZZZZZZZ";		TrHs = true;		while (LoopBackKey("Code",OSDOldr,1,TrHs))begin 			OldSNr = OSDOldr.Code;			NextM4Number(OldSNr,NewSNr);			OSDr.Code = NewSNr;			TrHs = false;		end;*/	end;		if(BlankDate(OSDr.TransDate))then begin		res = -1;		recordcheckerror(31006,"е не может быть пустым!",-1,"TransDate");		goto LOSDVcRecordCheck;	end;		if(blank(OSDr.PONr))then begin		res = -1;		recordcheckerror(31006,"е не может быть пустым!",-1,"PONr");		goto LOSDVcRecordCheck;	end;		if(BlankDate(OSDr.PODate))then begin		res = -1;		recordcheckerror(31006,"е не может быть пустым!",-1,"PODate");		goto LOSDVcRecordCheck;	end;		if(blank(OSDr.RefPRNr))then begin		res = -1;		recordcheckerror(31006,"е не может быть пустым!",-1,"RefPRNr");		goto LOSDVcRecordCheck;	end;		if(blank(OSDr.VendorCode))then begin		res = -1;		recordcheckerror(31006,"е не может быть пустым!",-1,"VendorCode");		goto LOSDVcRecordCheck;	end;		if(blank(OSDr.Phone))then begin		res = -1;		recordcheckerror(31006,"е не может быть пустым!",-1,"Phone");		goto LOSDVcRecordCheck;	end;		rwcnt = matrowcnt(OSDr);	for (i=0;i<rwcnt;i=i+1)begin		matrowget(OSDr,i,OSDrw);		if(nonblank(OSDrw.ArtCode))then begin			if(blank(OSDrw.Quant))then begin				res = -1;				recordcheckerror(31006,"е не может быть пустым!",i,"Quant");				goto LOSDVcRecordCheck;			end;			/*if(blank(OSDrw.Price))then begin				res = -1;				recordcheckerror(31006,"е не может быть пустым!",i,"Price");				goto LOSDVcRecordCheck;			end;			if(blank(OSDrw.CostPrice))then begin				res = -1;				recordcheckerror(31006,"е не может быть пустым!",i,"CostPrice");				goto LOSDVcRecordCheck;			end;			if(blank(OSDrw.Sum))then begin				res = -1;				recordcheckerror(31006,"е не может быть пустым!",i,"Sum");				goto LOSDVcRecordCheck;			end;			if(blank(OSDrw.Classification))then begin				res = -1;				recordcheckerror(31006,"е не может быть пустым!",i,"Classification");				goto LOSDVcRecordCheck;			end;*/			if(blank(OSDrw.UnitCode))then begin				res = -1;				recordcheckerror(31006,"е не может быть пустым!",i,"UnitCode");				goto LOSDVcRecordCheck;			end;			if(blank(OSDrw.Article))then begin				res = -1;				recordcheckerror(31006,"е не может быть пустым!",i,"Article");				goto LOSDVcRecordCheck;			end;			if(blank(OSDrw.Spec))then begin				res = -1;				recordcheckerror(31006,"е не может быть пустым!",i,"Spec");				goto LOSDVcRecordCheck;			end;		end;					end;	if(stat==Rs_update)then begin		//if(OSDr.OKFlag==1 and OSD2r.OKFlag==0)then begin			if(nonblank(OSDr.Code))then begin				blockload(OSDSb);					rwcnt = matrowcnt(OSDSb);				for (i=0;i<rwcnt;i=i+1) begin					matrowget(OSDSb,i,OSDSrw);					OldSNr = OSDSrw.CurNr;					NextM4SerialNumber(OldSNr,NewSNr);					if(setinset(NewSNr,OSDr.Code))then begin						OSDSrw.CurNr = OSDr.Code;						matrowput(OSDSb,i,OSDSrw);					end;				end;				BlockStore(OSDSb);			end;		//end;	end;	if(stat==Rs_insert)then begin		//if(OSDr.OKFlag==1)then begin			if(nonblank(OSDr.Code))then begin				blockload(OSDSb);					rwcnt = matrowcnt(OSDSb);				for (i=0;i<rwcnt;i=i+1) begin					matrowget(OSDSb,i,OSDSrw);					OldSNr = OSDSrw.CurNr;					NextM4SerialNumber(OldSNr,NewSNr);					if(setinset(NewSNr,OSDr.Code))then begin						OSDSrw.CurNr = OSDr.Code;						matrowput(OSDSb,i,OSDSrw);					end;				end;				BlockStore(OSDSb);			end;		//end;	end;		OSDSumUp(OSDr);	LOSDVcRecordCheck:;	OSDVcRecordCheck = res;return;end;global function string 100 BPICodeToName(string Code)beginrecord BPICollectionVc Collr;record BPIGroupVc Grr;record BPISubGroupVc SubGrr;record BPICategoryVc Catr;record BPIMaterialVc Matr;record BPIColorVc Colr;record BPIShapeVc Shr;record BPISizeVc Sizer;record BPIUseVc Userr;record BPISexVc Sexr;record BPIPlatingVc Plr;record BPIClarityVc Clr;record BPIWeightVc Wgr;record BPICutVc Cutr;record BPIStoneVc Str;record BPIStrapVc Strapr;record BPIOdourVc Odr;record BPIBrandVc Brandr;string 100 name;Brandr.Code = Code;if(ReadFirstMain(Brandr,1,true)) then begin	name = Brandr.Name;end;Collr.Code=Code;if(ReadFirstMain(Collr,1,true)) then begin	name=Collr.Name;end;Grr.Code=Code;if(ReadFirstMain(Grr,1,true)) then begin	name=Grr.Name;end;SubGrr.Code=Code;if(ReadFirstMain(SubGrr,1,true)) then begin	name=SubGrr.Name;end;Catr.Code=Code;if(ReadFirstMain(Catr,1,true)) then begin	name=Catr.Name;end;Matr.Code=Code;if(ReadFirstMain(Matr,1,true)) then begin	name=Matr.Name;end;Colr.Code=Code;if(ReadFirstMain(Colr,1,true)) then begin	name=Colr.Name;end;Shr.Code=Code;if(ReadFirstMain(Shr,1,true)) then begin	name=Shr.Name;end;Sizer.Code=Code;if(ReadFirstMain(Sizer,1,true)) then begin	name=Sizer.Name;end;Userr.Code=Code;if(ReadFirstMain(Userr,1,true)) then begin	name=Userr.Name;end;Sexr.Code=Code;if(ReadFirstMain(Sexr,1,true)) then begin	name=Sexr.Name;end;Plr.Code=Code;if(ReadFirstMain(Plr,1,true)) then begin	name=Plr.Name;end;Clr.Code=Code;if(ReadFirstMain(Clr,1,true)) then begin	name=Clr.Name;end;Wgr.Code=Code;if(ReadFirstMain(Wgr,1,true)) then begin	name=Wgr.Name;end;Cutr.Code=Code;if(ReadFirstMain(Cutr,1,true)) then begin	name=Cutr.Name;end;Str.Code=Code;if(ReadFirstMain(Str,1,true)) then begin	name=Str.Name;end;Strapr.Code=Code;if(ReadFirstMain(Strapr,1,true)) then begin	name=Strapr.Name;end;Odr.Code=Code;if(ReadFirstMain(Odr,1,true)) then begin	name=Odr.Name;end;BPICodeToName = name;return;end;