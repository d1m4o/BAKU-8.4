//server-only
external inner function roundmode SetRoundModeD(Integer);// Edit ************************** Tuesday, 1 April 2014 17:03:06
external procedure LogProcTime(string,longint);
external inner function Boolean PUVc_PasteVECode(var record PUVc);
external inner procedure PUVc_PasteCostPrice(var record PUVc,Integer);
external inner function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
external inner procedure PUSumUp(var record PUVc);
external inner procedure PUVc_PasteLocation(var record PUVc,Integer);
remote procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);

/*global
updating function LongInt IVVcRecordCheck(record IVVc IVp,record IVVc IV2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer insertmode,updatemode;
  record IVrsVc IVrsr,IV1rsr;
  record INVc INr;
  record LocalMachineVc LMr;
  LongInt sernr;
  integer i,rwcnt;
  row IVVc IVpw;
  longint curtick;
	
	curtick = getcurtick();
  logtext(0,"IVVcRecordCheck");
  
  res = 0;
  
  //SetLangMode(LangRussian,"RUS",0);// Edit ************************** Wednesday, 5 November 2014 13:31:31
 
  res=inner.IVVcRecordCheck(IVp,IV2p,stat,long4);
  if res!=-1 then begin
    insertmode = 1;//Rs_insert
    updatemode = 2;//Rs_update
    if IVp.OKFlag==1 and (stat==insertmode or IV2p.OKFlag==0) then begin
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVpw);
        IV1rsr.SerNr = 999999999;
        if ReadLastMain(IV1rsr,1,false) then begin
          sernr = IV1rsr.SerNr + 1;
        end else begin
          sernr = 1;
        end;
        if nonblank(IVpw.ArtCode) then begin
          RecordNew(IVrsr);
          IVrsr.SerNr = sernr;
          IVrsr.IVNr = IVp.SerNr;
          IVrsr.TransDate = IVp.TransDate;
          IVrsr.RowNr = i;
          IVrsr.ArtCode = IVpw.ArtCode;
          IVrsr.Spec = IVpw.Spec;
          if IVp.InvType==3 then begin
            IVrsr.Quant = -IVpw.Quant;
            IVrsr.FIFO = -IVpw.FIFO;
            IVrsr.Sum = -IVpw.Sum;
          end else begin
            IVrsr.Quant = IVpw.Quant;
            IVrsr.FIFO = IVpw.FIFO;
            IVrsr.Sum = IVpw.Sum;
          end;
          INr.Code = IVpw.ArtCode;
          if ReadFirstMain(INr,1,true) then begin
            IVrsr.Group = INr.Group;
            IVrsr.DispGroups = INr.DispGroups;
          end;
          IVrsr.MachineName = IVp.MachineName;
          if RecordInsert(IVrsr,true) then begin 
          end;
        end;
      end;
    end;
  end;

  LIVVcRecordCheck:;
  IVVcRecordCheck = res;
	LogProcTime("IVVcRecordCheck",getcurtick()-curtick); 
  RETURN;
END;  */
global
updating function LongInt RebVcRecordCheck(var record RebVc Rebr,record RebVc Reb2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer insertmode;
  record RebVc locRebr;
  row RebVc Rebrw; //Edit***************************Sasha2,13:36 23.12.2015
  Integer rwcnt,i,cnt,j; //Edit***************************Sasha2,13:36 23.12.2015
  record INVc INr; //Edit***************************Sasha2,13:37 23.12.2015
  Boolean foundf; //Edit***************************Sasha2,14:15 23.12.2015
  vector LongInt doublrow;
  array string 255 MyRebRecord,MyToDate,MyFromDate;
  array val MyRebRecordVra;
  boolean testf,TrHs;
  string 255 noCreate,Created;
	longint curtick;
	
	curtick = getcurtick();
  res = inner.RebVcRecordCheck(Rebr,Reb2r,stat,long4);
	if blank(Rebr.Comment) then begin
    res = -1;
    RecordCheckError(36211,"",-1,"Comment");      
    goto LRebVcRecordCheck;     
  end; 
LRebVcRecordCheck:;	
// LogProcTime("RebVcRecordCheck",getcurtick()-curtick); 
RebVcRecordCheck = res;
return;
end;	

/*global
updating function LongInt IVVcRecordImportAfter(var record IVVc IVp,record IVVc IV2p,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record IVrsVc IVrsr,IV1rsr;
  record INVc INr;
  record LocalMachineVc LMr;
  LongInt sernr;
  integer i,rwcnt;
  row IVVc IVpw;
  
  res = inner.IVVcRecordImportAfter(IVp,IV2p,long3,long4);
  if res==-1 then begin
    if (IVp.OKFlag==1 and IVp.Invalid==0) then begin
      rwcnt = MatRowCnt(IVp);
      IV1rsr.SerNr = 999999999;
			if (ReadLastMain(IV1rsr,1,false)) then begin
				sernr = IV1rsr.SerNr + 1;
			end else begin
				sernr = 1;
			end;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVpw);
        if (nonblank(IVpw.ArtCode)) then begin
          RecordNew(IVrsr);
          IVrsr.SerNr = sernr;
          IVrsr.IVNr = IVp.SerNr;
          IVrsr.TransDate = IVp.TransDate;
          IVrsr.RowNr = i;
          IVrsr.ArtCode = IVpw.ArtCode;
          IVrsr.Spec = IVpw.Spec;
          if IVp.InvType==3 then begin
            IVrsr.Quant = -IVpw.Quant;
            IVrsr.FIFO = -IVpw.FIFO;
            IVrsr.Sum = -IVpw.Sum;
          end else begin
            IVrsr.Quant = IVpw.Quant;
            IVrsr.FIFO = IVpw.FIFO;
            IVrsr.Sum = IVpw.Sum;
          end;
          INr.Code = IVpw.ArtCode;
          if ReadFirstMain(INr,1,true) then begin
            IVrsr.Group = INr.Group;
            IVrsr.DispGroups = INr.DispGroups;
          end;
          IVrsr.MachineName = IVp.MachineName;
          RecordInsert(IVrsr,true);
          sernr = sernr + 1;
        end;
      end;
    end;
  end;
  
  IVVcRecordImportAfter = res; 
  RETURN;
END;*/

global
updating function LongInt ExternalStoreVcRecordCheck(record ExternalStoreVc ESp,record ExternalStoreVc ES2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  
  res = 0;
  if (blank(ESp.Code)) then begin
    RecordCheckError(1058,ESp.Code,-1,"Code");      
    res = -1; 
    goto LExternalStoreVcRecordCheck;
  end;
  

  LExternalStoreVcRecordCheck:;
  ExternalStoreVcRecordCheck = res;
  RETURN;
END; 

updating procedure ExtSalesUpdateLoyaltyCard(string custcode,val sum,record ExternalSalesVc ESp)
begin
 record LoyaltyCardVc LCr;
 record PointsHistVc PHr;
 boolean TrHs,testf;
 
 LCr.CustCode = custcode;
 TrHs = true;
 while(loopkey("ActCustCode",LCr,1,TrHs))begin
 	testf = true;
 	if(LCr.CustCode!=custcode)then begin TrHs = false; testf = false; end;
 	if(LCr.LCMLevel!="1")then begin testf = false; end;
 	
 	if(testf)then begin
		LCr.StartBalance = LCr.StartBalance + sum;
		LCr.PointsBalance = LCr.PointsBalance + sum;
		recordstore(LCr,true);
	
		recordnew(PHr);
		PHr.SerNr = NextSerNr("PointsHistVc",PHr.TransDate,-1,false,"");
		PHr.FileName = "ExternalSalesVc";
		PHr.TransNr = ESp.SerNr;
		PHr.LMCardNr = LCr.SerNr;
		PHr.FWBalance = LCr.PointsBalance;
		PHr.Points = sum;
		PHr.CustCode = ESp.CustCode;
		PHr.Location = ESp.Location;
		RecordStore(PHr,false); 
 	end;
 end;

return;
end;


global
updating function LongInt ExternalSalesVcRecordRemoveTest(record ExternalSalesVc ESp,record ExternalSalesVc ES2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  res = 1;
  
  if(ESp.OKFlag==1)then begin
  	if (stat>0) then begin
			MessageBox(1560,"");
			res = 0;
		end;
  	
  end;
  ExternalSalesVcRecordRemoveTest = res;
  RETURN;
END;


global
updating function LongInt ExternalSalesVcRecordDefaults(record ExternalSalesVc ESp,record ExternalSalesVc ES2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

 
  ESp.TransDate = currentdate;
	
  ExternalSalesVcRecordDefaults = res;
  RETURN;
END; 

global
updating function LongInt ExternalSalesVcRecordCheck(record ExternalSalesVc ESp,record ExternalSalesVc ES2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer insertmode,updatemode;
  record LoyaltyCardVc LCr;
	
	logtext(0,"ExternalSalesVcRecordCheck");
	
  res = 0;
  
  if (ESp.SerNr<0) then begin
  	ESp.SerNr = NextSerNr("ExternalSalesVc",CurrentDate,-1,false,"");
  end;
  if (blank(ESp.CustCode)) then begin
    RecordCheckError(1058,ESp.CustCode,-1,"CustCode");      
    res = -1; 
    goto LExternalSalesVcRecordCheck;
  end;
  if (blank(ESp.TransDate)) then begin
    RecordCheckError(1058,ESp.TransDate,-1,"TransDate");      
    res = -1; 
    goto LExternalSalesVcRecordCheck;
  end;
  if (blank(ESp.Location)) then begin
    RecordCheckError(1058,ESp.Location,-1,"Location");      
    res = -1; 
    goto LExternalSalesVcRecordCheck;
  end;
  if (ESp.Sum==0) then begin
    RecordCheckError(1058,ESp.Sum,-1,"Sum");      
    res = -1; 
    goto LExternalSalesVcRecordCheck;
  end;
  if(ESp.OKFlag==1)then begin
  	LCr.CustCode = ESp.CustCode;
  	if(readfirstkey("ActCustCode",LCr,1,true)==false)then begin
  		RecordCheckError(31003,ESp.CustCode,-1,"CustCode");      
			res = -1; 
			goto LExternalSalesVcRecordCheck;
  	end;
  end;
  
  
	insertmode = 1;
  updatemode = 2;
  
  if(stat==insertmode)then begin
  	if(ESp.OKFlag==1)then begin
			ExtSalesUpdateLoyaltyCard(ESp.CustCode,ESp.Sum,ESp);
		end;
	end;
	if(stat==updatemode)then begin
  	if(ESp.OKFlag==1 and ES2p.OKFlag==0)then begin
			ExtSalesUpdateLoyaltyCard(ESp.CustCode,ESp.Sum,ESp);
		end;
		if(ESp.OKFlag==0 and ES2p.OKFlag==1)then begin
			ExtSalesUpdateLoyaltyCard(ESp.CustCode,-ESp.Sum,ESp);
		end;
	end;
	
  LExternalSalesVcRecordCheck:;
  ExternalSalesVcRecordCheck = res;
  RETURN;
END; 




global
function LongInt GCVcRecordDefaults(var record GCVc GCr,record GCVc GC2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = inner.GCVcRecordDefaults(GCr,GC2r,stat,long4);	
	GCr.Comment = CurMachineName; 
 	GCVcRecordDefaults = res; 
  RETURN;
END;	


global
function LongInt GCSVcRecordCheck(var record GCSVc GCSr,record GCSVc GCS2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = inner.GCSVcRecordCheck(GCSr,GCS2r,stat,long4);	
	if (GCSr.ExpiryDate<=GCSr.TransDate) then begin				//Edit--------Dima-------30.12.2014
    		RecordCheckError(1142," " & GCSr.ExpiryDate,-1,"ExpiryDate");
    		res = -1;
  	end;

 	GCSVcRecordCheck = res; 
  RETURN;
END;
	
global
procedure SplitSDrByCurrency(var array record SDVc curSDr,record SDVc SDr,var array string currs,var Integer curcnt)
begin
  record ItemHistVc IHr;
  vector boolean curIncluded;
  Vector string 10 curindex;
  record SDVc vectSDr;
  row SDVc vectSDrw,SDrw;
  Boolean TrHs;
  Integer rwcnt;
  val qty;
    
    IHr.FileName = "SDVc";
    IHr.TransNr = SDr.SerNr;
    TrHs = true;
    while (LoopKey("FNTransNr",IHr,2,TrHs)) begin
      if (IHr.FileName!="SDVc" or IHr.TransNr!=SDr.SerNr) then begin TrHs = false; end;
      if (TrHs) then begin
      	if(blank(IHr.CurncyCode))then begin
      		IHr.CurncyCode = "AZN";
      	end;
        if (curIncluded[IHr.CurncyCode]) then begin
          vectSDr = curSDr[curindex[IHr.CurncyCode]];
        end else begin
          RECORDNEW(vectSDr);
					vectSDr.Location = SDr.Location;
          vectSDr.SerNr = SDr.SerNr;
          if(blank(IHr.CurncyCode))then begin
          	IHr.CurncyCode = "AZN";
          end;
          curIncluded[IHr.CurncyCode] = true;
          currs[curcnt] = IHr.CurncyCode;
          curindex[IHr.CurncyCode] = curcnt;
          curcnt = curcnt + 1;
        end;
        rwcnt = MatRowCnt(vectSDr);
        ClearRow(vectSDr,vectSDrw,1);
        qty = -IHr.Qty;
        vectSDrw.ArtCode = IHr.ArtCode;
        vectSDrw.Qty = qty;
        vectSDrw.FIFO = IHr.TotCostPrice/qty;
        vectSDrw.FIFORowVal = IHr.TotCostPriceCurncy/qty;
        MatRowGet(SDr,IHr.Row,SDrw);
				vectSDrw.Objects = SDrw.Objects;
				vectSDrw.SerialNr = SDrw.SerialNr;
        MatRowPut(vectSDr,rwcnt,vectSDrw);
        curSDr[curindex[IHr.CurncyCode]] = vectSDr;
      end;
    end;
  
  return;
end; //Edit***************************ABr,11:38 18.12.2019 }

global
updating function LongInt SDVcRecordUpdateAfter(var record SDVc SDr,record SDVc SD2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record SDVc NilSDr;
  record UserVc Userr;
  record ORVc ORr;
	record PUVc PUr;
	row PUVc PUrw;
	integer oldComp,i,rwcnt,k,m,curcnt;
	string 255 VECode,warning,inwarn;
	record LocationVc Locr,Loc1r;
	row SDVc SDrw;
	record ConsItemVc CIr;
	record BPIBrandVc BBr;
	array record SDVc curSD;
	array string 20 currs;
	record BaseCurBlock BCb,targetBCb;
	string 5 curcode,sourcecurcode;
	val fr,to1,to2,br1,br2,s; 
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	record PosVc Posr;
	record SDVc SD1r;
	res = 0;
	res = inner.SDVcRecordUpdateAfter(SDr,SD2r,stat,long4);
	oldComp = CurrentCompany;
	BlockLoad(Compb);
	BlockLoad(targetBCb);
	matrowget(Compb,oldComp-1,Comprw);

	if(SDr.OKFlag!=0 and SD2r.OKFlag==0) then begin
		SplitSDrByCurrency(curSD,SDr,currs,curcnt);
		if(curcnt==0) then begin curcnt=1; curSD[0] = SDr; end;
  	for (m=0;m<curcnt;m=m+1) begin
			SD1r = curSD[m];
			Loc1r.Code = SD1r.Location;
			if(ReadFirstMain(Loc1r,1,true)) then begin
				if(nonblank(Loc1r.FOBSuplier)) then begin
					VECode = Loc1r.FOBSuplier;
				end;	
			end;	
			SetCompany(18,false);
			RECORDNEW(PUr);
			if (currs[m]!=targetBCb.BaseCur1) then begin
				curcode = currs[m];
				fr = blankval;
				to1 = blankval;
				to2 = blankval;
				br1 = blankval;
				br2 = blankval;
				GetFullCurncyRate(curcode,PUr.TransDate,fr,to1,to2,br1,br2);
				if (curcode!=currs[m]) then begin
					logtext(0,"No currency " & currs[m] & " in target company " & Comprw.ShortName);
				end;
				PUr.CurncyCode = curcode;
				PUr.FrRate = fr;
				PUr.ToRateB1 = to1; 
				PUr.ToRateB2 = to2;
				PUr.BaseRate1 = br1;
				PUr.BaseRate2 = br2;
			end;
			PUr.VECode = VECode;
			PUVc_PasteVECode(PUr);
			PUr.VEName = "#Stock Depreciation# " & SDr.SerNr & " from company " & Comprw.ShortName;
			if (PUr.SerNr<=0) then begin
				PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");
			end;	
			rwcnt = MatRowCnt(SD1r);
			for (i=0;i<rwcnt;i=i+1) begin
				MatRowGet(SD1r,i,SDrw);
				ClearRow(PUr,PUrw,1);
				CIr.LocCode = SDrw.ArtCode;
				if(ReadFirstKey("LocCodeBrand",CIr,1,true)) then begin end;
				PUrw.ArtCode = CIr.Code;
				MatRowPut(PUr,i,PUrw);
				PUVc_PasteArtCode(PUr,i,warning,inwarn);
				MatRowGet(PUr,i,PUrw);
				BBr.Code = CIr.BrandCode;
				if(ReadFirstMain(BBr,1,true)) then begin end;
				PUrw.ToPosCode = BBr.CWHCode;
				Posr.Code = BBr.CWHCode;
				if(ReadFirstMain(Posr,1,true)) then begin end;
				PUrw.Location = Posr.Location;
				MatRowPut(PUr,i,PUrw);
				PUVc_PasteLocation(PUr,i);
				MatRowGet(PUr,i,PUrw);
				Locr.Code = Posr.Location;
				If(ReadFirstMain(Locr,1,true)) then begin end;
				if (NonBlank(PUrw.Objects)) then begin
					PUrw.Objects = PUrw.Objects & "," & Locr.Objects;
				end else begin
					PUrw.Objects = Locr.Objects;
				end;
				if (NonBlank(PUrw.Objects)) then begin
					PUrw.Objects =  "," & SDrw.Objects;
				end else begin
					PUrw.Objects = SDrw.Objects;
				end;
				MatRowPut(PUr,i,PUrw);
				MatRowGet(PUr,i,PUrw);
				PUrw.Quant = SDrw.Qty;
				MatRowPut(PUr,i,PUrw);
				//PUVc_PasteQuant(PUr,k);//Commented Edit ************************** BPI Ukraine - KramarAlexandr - 02, 06 08 2019 y. at 3:34:03 PM
				MatRowGet(PUr,i,PUrw);
				PUrw.UPrice = SDrw.FIFORowVal;
				PUrw.SerialNr = SDrw.SerialNr;// Edit ************************** BPI Ukraine - KramarAlexandr - 03, 25 09 2019 y. at 9:41:17 AM
				/*PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
								PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
								PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
								PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
				PUrw.CostPrice = p;
				PUrw.Sum = s;*/
				PUrw.CostPrice = SDrw.FIFO;
				MatRowPut(PUr,i,PUrw);
				PUVc_PasteCostPrice(PUr,i);
				MatRowGet(PUr,i,PUrw);
				PUrw.Extra = blankval;// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 1 August 2019 16:24:38
				s = SDrw.FIFO*PUrw.Quant;
				PUrw.Sum = s;
				MatRowPut(PUr,i,PUrw);
				
			end;
			PUSumUp(PUr);
			if (RECORDSTORE(PUr,false)) then begin
				CreateRecordLink(SDr,oldComp,PUr,currentcompany);
				CreateRecordLink(PUr,currentcompany,SDr,oldComp);
			end;	
		end;	
	end;	
	ResetCompany(oldComp);
  SDVcRecordUpdateAfter = res;
  RETURN;
END;



