remote procedure HandleNewINDClassmCode(var record NewINVc,integer); //Edit***************************Sasha2,16:02 16.12.2015procedure NormalizeName(var string name)beginstring 200 newclassname,c;integer i,lenth,zercnt;    lenth = len(name);  for(i=0;i<lenth;i=i+1)begin  	if((asc(mid(name,i,1))>31 and asc(mid(name,i,1))<127) or (asc(mid(name,i,1))>1039 and asc(mid(name,i,1))<1111))then begin  		if(mid(name,i,1)!="\"")then begin  		newclassname = newclassname & mid(name,i,1);  		end;  	end;  end;  name = newclassname;return;end;//Edit***************************Sasha2,12:00 16.12.2015 {globalfunction boolean NewINDClassmCodeEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;		boolean res;		if(changed>0)then begin		getwindowrecord(wn,newINr);		if(rownr>-1)then begin			HandleNewINDClassmCode(newINr,rownr);		end else begin			//		end;		putwindowrecord(wn,newINr);	end;	NewINDClassmCodeEFAfter = res;return;end; //Edit***************************Sasha2,12:00 16.12.2015 }globalfunction boolean NewINDClassmNameEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;	row NewINVc newINrw;		boolean res;		if(changed>0)then begin		getwindowrecord(wn,newINr);		if(rownr>-1)then begin			matrowget(newINr,rownr,newINrw);				NormalizeName(newINrw.Name);			matrowput(newINr,rownr,newINrw);		end else begin			NormalizeName(newINr.Name);		end;		putwindowrecord(wn,newINr);	end;	NewINDClassmNameEFAfter = res;return;end;globalfunction boolean NewIN2DClassmBrandEFAfter(integer wn,integer changed)begin  record NewINVc newINr;	record BPIBrandVc BPIBr;		boolean res, TrHs;	  TrHs = true;	if(changed!=0)then begin		getwindowrecord(wn,newINr);    BPIBr.Code = newINr.Brand;		if (readfirstmain(BPIBr,1,true)) then begin      newINr.Brand = BPIBr.Code;    end    else begin      BPIBr.Name = newINr.Brand;      if (readfirstkey("Name",BPIBr,1,true)) then begin        newINr.Brand = BPIBr.Code;      end;    end;		putwindowrecord(wn,newINr);	end;	NewIN2DClassmBrandEFAfter = res;  return;end;/// для матрицыglobalfunction boolean NewIN2DClassmBrandSCEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIBrandVc BPIBr;	row NewINVc newINrw;		boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIBr.Code = newINrw.BrandSC;    if (readfirstmain(BPIBr,1,true)) then begin      newINrw.BrandSC = BPIBr.Code;    end    else begin      BPIBr.Name = newINrw.BrandSC;      if (readfirstkey("Name",BPIBr,1,true)) then begin        newINrw.BrandSC = BPIBr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmBrandSCEFAfter = res;return;end;globalfunction boolean NewIN2DClassmCollectionEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPICollectionVc BPIColr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    if (readfirstmain(BPIColr,1,true)) then begin      newINrw.Collection = BPIColr.Code;    end    else begin      BPIColr.Name = newINrw.Collection;      if (readfirstkey("Name",BPIColr,1,true)) then begin        newINrw.Collection = BPIColr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmCollectionEFAfter = res;return;end;globalfunction boolean NewIN2DClassmGroupClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIGroupVc BPIGr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIGr.Code = newINrw.GroupCl;    if (readfirstmain(BPIGr,1,true)) then begin      newINrw.GroupCl = BPIGr.Code;    end    else begin      BPIGr.Name = newINrw.GroupCl;      if (readfirstkey("Name",BPIGr,1,true)) then begin        newINrw.GroupCl = BPIGr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmGroupClEFAfter = res;return;end;globalfunction boolean NewIN2DClassmSubGroupClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPISubGroupVc BPISubGr;  record NewClassSetVc NewClassSetr;	row NewINVc newINrw;	  row NewClassSetVc NewClassSetrw;  boolean res, TrHs;    TrHs = true;  	if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPISubGr.Code = newINrw.SubGroupCl;    if (readfirstmain(BPISubGr,1,true)) then begin      newINrw.SubGroupCl = BPISubGr.Code;    end    else begin      BPISubGr.Name = newINrw.SubGroupCl;      if (readfirstkey("Name",BPISubGr,1,true)) then begin        newINrw.SubGroupCl = BPISubGr.Code;      end;    end;    NewClassSetr.Group = "";    while (loopmain(NewClassSetr,1,TrHs)) begin      if (NewClassSetr.Type==newINrw.SubGroupCl) then begin        newINrw.classif31 = "";        newINrw.Material = "";        newINrw.Color = "";        newINrw.ShapeCut = "";        newINrw.SizeCl = "";        newINrw.UseCl = "";        newINrw.SexCl = "";        newINrw.PlatingCl = "";        newINrw.ClaritySC = "";        newINrw.WeightCl = "";        newINrw.CutCl = "";        newINrw.StoneCl = "";        newINrw.Strap = "";        newINrw.OdourCl = "";        for (i=0;i<matrowcnt(NewClassSetr);i=i+1) begin          matrowget (NewClassSetr,i,NewClassSetrw);          if (NewClassSetrw.CType=="CATEGORY") then begin            newINrw.classif31 = "*";          end;          if (NewClassSetrw.CType=="MATERIAL") then begin            newINrw.Material = "*";          end;          if (NewClassSetrw.CType=="COLOR") then begin            newINrw.Color = "*";          end;          if (NewClassSetrw.CType=="SHAPE") then begin            newINrw.ShapeCut= "*";          end;          if (NewClassSetrw.CType=="SIZE") then begin            newINrw.SizeCl = "*";          end;          if (NewClassSetrw.CType=="USE") then begin            newINrw.UseCl = "*";          end;          if (NewClassSetrw.CType=="SEX") then begin            newINrw.SexCl = "*";          end;          if (NewClassSetrw.CType=="PLATING") then begin            newINrw.PlatingCl = "*";          end;          if (NewClassSetrw.CType=="CLARITY") then begin            newINrw.ClaritySC = "*";          end;          if (NewClassSetrw.CType=="WEIGHT") then begin            newINrw.WeightCl = "*";          end;          if (NewClassSetrw.CType=="CUT") then begin            newINrw.CutCl = "*";          end;          if (NewClassSetrw.CType=="STONE") then begin            newINrw.StoneCl = "*";          end;          if (NewClassSetrw.CType=="STRAP") then begin            newINrw.Strap = "*";          end;          if (NewClassSetrw.CType=="ODOUR") then begin            newINrw.OdourCl = "*";          end;        end;        matrowput(newINr,rownr,newINrw);        TrHs = false;      end;    end;    resetloop(NewClassSetr);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmSubGroupClEFAfter = res;return;end;globalfunction boolean NewIN2DClassmclassif31EFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPICategoryVc BPICatr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPICatr.Code = newINrw.GroupCl;    if (readfirstmain(BPICatr,1,true)) then begin      newINrw.classif31 = BPICatr.Code;    end    else begin      BPICatr.Name = newINrw.classif31;      if (readfirstkey("Name",BPICatr,1,true)) then begin        newINrw.classif31 = BPICatr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);    	end;	NewIN2DClassmclassif31EFAfter = res;return;end;globalfunction boolean NewIN2DClassmMaterialEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIMaterialVc BPIMatr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIMatr.Code = newINrw.Material;    if (readfirstmain(BPIMatr,1,true)) then begin      newINrw.Material = BPIMatr.Code;    end    else begin      BPIMatr.Name = newINrw.Material;      if (readfirstkey("Name",BPIMatr,1,true)) then begin        newINrw.Material = BPIMatr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmMaterialEFAfter = res;return;end;globalfunction boolean NewIN2DClassmColorEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIColorVc BPICor;	row NewINVc newINrw;	  boolean res, TrHs;  		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPICor.Code = newINrw.Color;    if (readfirstmain(BPICor,1,true)) then begin      newINrw.Color = BPICor.Code;    end    else begin      BPICor.Name = newINrw.Color;      if (readfirstkey("Name",BPICor,1,true)) then begin        newINrw.Color = BPICor.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmColorEFAfter = res;return;end;globalfunction boolean NewIN2DClassmShapeCutEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIShapeVc BPIShaper;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIShaper.Code = newINrw.ShapeCut;    if (readfirstmain(BPIShaper,1,true)) then begin      newINrw.ShapeCut = BPIShaper.Code;    end    else begin      BPIShaper.Name = newINrw.ShapeCut;      if (readfirstkey("Name",BPIShaper,1,true)) then begin        newINrw.ShapeCut = BPIShaper.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmShapeCutEFAfter = res;return;end;globalfunction boolean NewIN2DClassmSizeClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPISizeVc BPISizer;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPISizer.Code = newINrw.SizeCl;    if (readfirstmain(BPISizer,1,true)) then begin      newINrw.SizeCl = BPISizer.Code;    end    else begin      BPISizer.Name = newINrw.SizeCl;      if (readfirstkey("Name",BPISizer,1,true)) then begin        newINrw.SizeCl = BPISizer.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmSizeClEFAfter = res;return;end;globalfunction boolean NewIN2DClassmUseClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIUseVc BPIUser;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIUser.Code = newINrw.UseCl;    if (readfirstmain(BPIUser,1,true)) then begin      newINrw.UseCl = BPIUser.Code;    end    else begin      BPIUser.Name = newINrw.UseCl;      if (readfirstkey("Name",BPIUser,1,true)) then begin        newINrw.UseCl = BPIUser.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmUseClEFAfter = res;return;end;globalfunction boolean NewIN2DClassmSexClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPISexVc BPISexr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPISexr.Code = newINrw.SexCl;    if (readfirstmain(BPISexr,1,true)) then begin      newINrw.SexCl = BPISexr.Code;    end    else begin      BPISexr.Name = newINrw.SexCl;      if (readfirstkey("Name",BPISexr,1,true)) then begin        newINrw.SexCl = BPISexr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmSexClEFAfter = res;return;end;globalfunction boolean NewIN2DClassmPlatingClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIPlatingVc BPIPlatr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIPlatr.Code = newINrw.PlatingCl;    if (readfirstmain(BPIPlatr,1,true)) then begin      newINrw.PlatingCl = BPIPlatr.Code;    end    else begin      BPIPlatr.Name = newINrw.PlatingCl;      if (readfirstkey("Name",BPIPlatr,1,true)) then begin        newINrw.PlatingCl = BPIPlatr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmPlatingClEFAfter = res;return;end;globalfunction boolean NewIN2DClassmClaritySCEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIClarityVc BPIClar;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIClar.Code = newINrw.ClaritySC;    if (readfirstmain(BPIClar,1,true)) then begin      newINrw.ClaritySC = BPIClar.Code;    end    else begin      BPIClar.Name = newINrw.ClaritySC;      if (readfirstkey("Name",BPIClar,1,true)) then begin        newINrw.ClaritySC = BPIClar.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmClaritySCEFAfter = res;return;end;globalfunction boolean NewIN2DClassmWeightClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIWeightVc BPIWeightr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIWeightr.Code = newINrw.WeightCl;    if (readfirstmain(BPIWeightr,1,true)) then begin      newINrw.WeightCl = BPIWeightr.Code;    end    else begin      BPIWeightr.Name = newINrw.WeightCl;      if (readfirstkey("Name",BPIWeightr,1,true)) then begin        newINrw.WeightCl = BPIWeightr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmWeightClEFAfter = res;return;end;globalfunction boolean NewIN2DClassmCutClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPICutVc BPICutr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPICutr.Code = newINrw.CutCl;    if (readfirstmain(BPICutr,1,true)) then begin      newINrw.CutCl = BPICutr.Code;    end    else begin      BPICutr.Name = newINrw.CutCl;      if (readfirstkey("Name",BPICutr,1,true)) then begin        newINrw.CutCl = BPICutr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmCutClEFAfter = res;return;end;globalfunction boolean NewIN2DClassmStoneClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIStoneVc BPIStoner;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIStoner.Code = newINrw.StoneCl;    if (readfirstmain(BPIStoner,1,true)) then begin      newINrw.StoneCl = BPIStoner.Code;    end    else begin      BPIStoner.Name = newINrw.StoneCl;      if (readfirstkey("Name",BPIStoner,1,true)) then begin        newINrw.StoneCl = BPIStoner.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmStoneClEFAfter = res;return;end;globalfunction boolean NewIN2DClassmStrapEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIStrapVc BPIStrapr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIStrapr.Code = newINrw.Strap;    if (readfirstmain(BPIStrapr,1,true)) then begin      newINrw.Strap = BPIStrapr.Code;    end    else begin      BPIStrapr.Name = newINrw.Strap;      if (readfirstkey("Name",BPIStrapr,1,true)) then begin        newINrw.Strap = BPIStrapr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmStrapEFAfter = res;return;end;globalfunction boolean NewIN2DClassmOdourClFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIOdourVc BPIOdourr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIOdourr.Code = newINrw.OdourCl;    if (readfirstmain(BPIOdourr,1,true)) then begin      newINrw.OdourCl = BPIOdourr.Code;    end    else begin      BPIOdourr.Name = newINrw.OdourCl;      if (readfirstkey("Name",BPIOdourr,1,true)) then begin        newINrw.OdourCl = BPIOdourr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassmOdourClFAfter = res;return;end;globalfunction Boolean NewINDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  res = true;  switch (fieldname) begin    case "Code": res = NewINDClassmCodeEFAfter(wn,rownr,changed); //Edit***************************Sasha2,12:00 16.12.2015    case "Name": res = NewINDClassmNameEFAfter(wn,rownr,changed);  end;  NewINDClassAfterEditField = res;  RETURN;END;globalfunction Boolean NewIN2DClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  res = true;  switch (fieldname) begin    case "Brand": res = NewIN2DClassmBrandEFAfter(wn,changed);    case "BrandSC": res = NewIN2DClassmBrandSCEFAfter(wn,rownr,changed);    case "Collection": res = NewIN2DClassmCollectionEFAfter(wn,rownr,changed);    case "GroupCl": res = NewIN2DClassmGroupClEFAfter(wn,rownr,changed);    case "SubGroupCl": res = NewIN2DClassmSubGroupClEFAfter(wn,rownr,changed);    case "classif31": res = NewIN2DClassmclassif31EFAfter(wn,rownr,changed);    case "Material": res = NewIN2DClassmMaterialEFAfter(wn,rownr,changed);    case "Color": res = NewIN2DClassmColorEFAfter(wn,rownr,changed);    case "ShapeCut": res = NewIN2DClassmShapeCutEFAfter(wn,rownr,changed);    case "SizeCl": res = NewIN2DClassmSizeClEFAfter(wn,rownr,changed);    case "UseCl": res = NewIN2DClassmUseClEFAfter(wn,rownr,changed);    case "SexCl": res = NewIN2DClassmSexClEFAfter(wn,rownr,changed);    case "PlatingCl": res = NewIN2DClassmPlatingClEFAfter(wn,rownr,changed);    case "ClaritySC": res = NewIN2DClassmClaritySCEFAfter(wn,rownr,changed);    case "WeightCl": res = NewIN2DClassmWeightClEFAfter(wn,rownr,changed);    case "CutCl": res = NewIN2DClassmCutClEFAfter(wn,rownr,changed);    case "StoneCl": res = NewIN2DClassmStoneClEFAfter(wn,rownr,changed);    case "Strap": res = NewIN2DClassmStrapEFAfter(wn,rownr,changed);     case "OdourCl": res = NewIN2DClassmOdourClFAfter(wn,rownr,changed);  end;  NewIN2DClassAfterEditField = res;  RETURN;END;globalfunction Boolean NewINDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)begin	record NewINVc newINr;	boolean res;		res = true;		getwindowrecord(wn,newINr);		if(newINr.OKFlag==1)then begin		res = false;		if(fieldname=="OKFlag")then begin			res = true;		end;	end;		NewINDClassActiveEditField = res;	return;end;