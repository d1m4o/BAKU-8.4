remote procedure HandleNewINDClassmCode(var record NewINVc,integer); //Edit***************************Sasha2,16:02 16.12.2015external procedure ExtractObj(string,var Integer,var string);remote procedure HandleNewIN2DClassCode(var record NewINVc, integer);remote procedure HandleNewIN2DClassSubGroup(var record NewINVc, integer);procedure NormalizeName(var string name)beginstring 200 newclassname,c;integer i,lenth,zercnt;    lenth = len(name);  for(i=0;i<lenth;i=i+1)begin  	if((asc(mid(name,i,1))>31 and asc(mid(name,i,1))<127) or (asc(mid(name,i,1))>1039 and asc(mid(name,i,1))<1111))then begin  		if(mid(name,i,1)!="\"")then begin  		newclassname = newclassname & mid(name,i,1);  		end;  	end;  end;  name = newclassname;return;end;//Edit***************************Sasha2,12:00 16.12.2015 {globalfunction boolean NewINDClassmCodeEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;		boolean res;		if(changed>0)then begin		getwindowrecord(wn,newINr);		if(rownr>-1)then begin			HandleNewINDClassmCode(newINr,rownr);		end else begin			//		end;		putwindowrecord(wn,newINr);	end;	NewINDClassmCodeEFAfter = res;return;end; //Edit***************************Sasha2,12:00 16.12.2015 }globalfunction boolean NewINDClassmNameEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;	row NewINVc newINrw;		boolean res;		if(changed>0)then begin		getwindowrecord(wn,newINr);		if(rownr>-1)then begin			matrowget(newINr,rownr,newINrw);				NormalizeName(newINrw.Name);			matrowput(newINr,rownr,newINrw);		end else begin			NormalizeName(newINr.Name);		end;		putwindowrecord(wn,newINr);	end;	NewINDClassmNameEFAfter = res;return;end;globalfunction boolean NewIN2DClassBrandEFAfter(integer wn,integer changed)begin  record NewINVc newINr;	record BPIBrandVc BPIBr;		boolean res, TrHs;	  TrHs = true;	if(changed!=0)then begin		getwindowrecord(wn,newINr);    BPIBr.Code = newINr.Brand;		if (readfirstmain(BPIBr,1,true)) then begin      newINr.Brand = BPIBr.Code;    end    else begin      BPIBr.Name = newINr.Brand;      if (readfirstkey("Name",BPIBr,1,true)) then begin        newINr.Brand = BPIBr.Code;      end;    end;		putwindowrecord(wn,newINr);	end;	NewIN2DClassBrandEFAfter = res;  return;end;/// для матрицыglobalfunction boolean NewIN2DClassBrandSCEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIBrandVc BPIBr;	row NewINVc newINrw;		boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);		if(newINrw.BrandSC != newINr.Brand) then begin			messagebox(0,"товар" & rownr & "несоответствие брендов");		end;	    BPIBr.Code = newINrw.BrandSC;    if (readfirstmain(BPIBr,1,true)) then begin      newINrw.BrandSC = BPIBr.Code;    end    else begin      BPIBr.Name = newINrw.BrandSC;      if (readfirstkey("Name",BPIBr,1,true)) then begin        newINrw.BrandSC = BPIBr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassBrandSCEFAfter = res;return;end;globalfunction boolean NewIN2DClassCollectionEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPICollectionVc BPIColr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    if (readfirstmain(BPIColr,1,true)) then begin      newINrw.Collection = BPIColr.Code;    end    else begin      BPIColr.Name = newINrw.Collection;      if (readfirstkey("Name",BPIColr,1,true)) then begin        newINrw.Collection = BPIColr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassCollectionEFAfter = res;return;end;globalfunction boolean NewIN2DClassGroupClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIGroupVc BPIGr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIGr.Code = newINrw.GroupCl;    if (readfirstmain(BPIGr,1,true)) then begin      newINrw.GroupCl = BPIGr.Code;    end    else begin      BPIGr.Name = newINrw.GroupCl;      if (readfirstkey("Name",BPIGr,1,true)) then begin        newINrw.GroupCl = BPIGr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassGroupClEFAfter = res;return;end;globalfunction boolean NewIN2DClassSubGroupClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPISubGroupVc BPISubGr;  record NewClassSetVc NewClassSetr;	row NewINVc newINrw;	  row NewClassSetVc NewClassSetrw;  boolean res, TrHs;    TrHs = true;  	if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);      BPISubGr.Name = newINrw.SubGroupCl;      if (readfirstkey("Name",BPISubGr,1,true)) then begin        newINrw.SubGroupCl = BPISubGr.Code;				matrowput(newINr,rownr,newINrw);				putwindowrecord(wn,newINr);      end;		GetWindowRecord(wn,NewINr);    HandleNewIN2DClassSubGroup(newINr,rownr);		putwindowrecord(wn,newINr);	end;	NewIN2DClassSubGroupClEFAfter = res;return;end;globalfunction boolean NewIN2DClassclassif31EFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPICategoryVc BPICatr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPICatr.Code = newINrw.GroupCl;    if (readfirstmain(BPICatr,1,true)) then begin      newINrw.classif31 = BPICatr.Code;    end    else begin      BPICatr.Name = newINrw.classif31;      if (readfirstkey("Name",BPICatr,1,true)) then begin        newINrw.classif31 = BPICatr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);    	end;	NewIN2DClassclassif31EFAfter = res;return;end;globalfunction boolean NewIN2DClassMaterialEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIMaterialVc BPIMatr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIMatr.Code = newINrw.Material;    if (readfirstmain(BPIMatr,1,true)) then begin      newINrw.Material = BPIMatr.Code;    end    else begin      BPIMatr.Name = newINrw.Material;      if (readfirstkey("Name",BPIMatr,1,true)) then begin        newINrw.Material = BPIMatr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassMaterialEFAfter = res;return;end;globalfunction boolean NewIN2DClassColorEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIColorVc BPICor;	row NewINVc newINrw;	  boolean res, TrHs;  		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPICor.Code = newINrw.Color;    if (readfirstmain(BPICor,1,true)) then begin      newINrw.Color = BPICor.Code;    end    else begin      BPICor.Name = newINrw.Color;      if (readfirstkey("Name",BPICor,1,true)) then begin        newINrw.Color = BPICor.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassColorEFAfter = res;return;end;globalfunction boolean NewIN2DClassShapeCutEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIShapeVc BPIShaper;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIShaper.Code = newINrw.ShapeCut;    if (readfirstmain(BPIShaper,1,true)) then begin      newINrw.ShapeCut = BPIShaper.Code;    end    else begin      BPIShaper.Name = newINrw.ShapeCut;      if (readfirstkey("Name",BPIShaper,1,true)) then begin        newINrw.ShapeCut = BPIShaper.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassShapeCutEFAfter = res;return;end;globalfunction boolean NewIN2DClassSizeClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPISizeVc BPISizer;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPISizer.Code = newINrw.SizeCl;    if (readfirstmain(BPISizer,1,true)) then begin      newINrw.SizeCl = BPISizer.Code;    end    else begin      BPISizer.Name = newINrw.SizeCl;      if (readfirstkey("Name",BPISizer,1,true)) then begin        newINrw.SizeCl = BPISizer.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassSizeClEFAfter = res;return;end;globalfunction boolean NewIN2DClassUseClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIUseVc BPIUser;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIUser.Code = newINrw.UseCl;    if (readfirstmain(BPIUser,1,true)) then begin      newINrw.UseCl = BPIUser.Code;    end    else begin      BPIUser.Name = newINrw.UseCl;      if (readfirstkey("Name",BPIUser,1,true)) then begin        newINrw.UseCl = BPIUser.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassUseClEFAfter = res;return;end;globalfunction boolean NewIN2DClassSexClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPISexVc BPISexr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPISexr.Code = newINrw.SexCl;    if (readfirstmain(BPISexr,1,true)) then begin      newINrw.SexCl = BPISexr.Code;    end    else begin      BPISexr.Name = newINrw.SexCl;      if (readfirstkey("Name",BPISexr,1,true)) then begin        newINrw.SexCl = BPISexr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassSexClEFAfter = res;return;end;globalfunction boolean NewIN2DClassPlatingClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIPlatingVc BPIPlatr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIPlatr.Code = newINrw.PlatingCl;    if (readfirstmain(BPIPlatr,1,true)) then begin      newINrw.PlatingCl = BPIPlatr.Code;    end    else begin      BPIPlatr.Name = newINrw.PlatingCl;      if (readfirstkey("Name",BPIPlatr,1,true)) then begin        newINrw.PlatingCl = BPIPlatr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassPlatingClEFAfter = res;return;end;globalfunction boolean NewIN2DClassClaritySCEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIClarityVc BPIClar;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIClar.Code = newINrw.ClaritySC;    if (readfirstmain(BPIClar,1,true)) then begin      newINrw.ClaritySC = BPIClar.Code;    end    else begin      BPIClar.Name = newINrw.ClaritySC;      if (readfirstkey("Name",BPIClar,1,true)) then begin        newINrw.ClaritySC = BPIClar.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassClaritySCEFAfter = res;return;end;globalfunction boolean NewIN2DClassWeightClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIWeightVc BPIWeightr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIWeightr.Code = newINrw.WeightCl;    if (readfirstmain(BPIWeightr,1,true)) then begin      newINrw.WeightCl = BPIWeightr.Code;    end    else begin      BPIWeightr.Name = newINrw.WeightCl;      if (readfirstkey("Name",BPIWeightr,1,true)) then begin        newINrw.WeightCl = BPIWeightr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassWeightClEFAfter = res;return;end;globalfunction boolean NewIN2DClassCutClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPICutVc BPICutr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPICutr.Code = newINrw.CutCl;    if (readfirstmain(BPICutr,1,true)) then begin      newINrw.CutCl = BPICutr.Code;    end    else begin      BPICutr.Name = newINrw.CutCl;      if (readfirstkey("Name",BPICutr,1,true)) then begin        newINrw.CutCl = BPICutr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassCutClEFAfter = res;return;end;globalfunction boolean NewIN2DClassStoneClEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIStoneVc BPIStoner;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIStoner.Code = newINrw.StoneCl;    if (readfirstmain(BPIStoner,1,true)) then begin      newINrw.StoneCl = BPIStoner.Code;    end    else begin      BPIStoner.Name = newINrw.StoneCl;      if (readfirstkey("Name",BPIStoner,1,true)) then begin        newINrw.StoneCl = BPIStoner.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassStoneClEFAfter = res;return;end;globalfunction boolean NewIN2DClassStrapEFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIStrapVc BPIStrapr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIStrapr.Code = newINrw.Strap;    if (readfirstmain(BPIStrapr,1,true)) then begin      newINrw.Strap = BPIStrapr.Code;    end    else begin      BPIStrapr.Name = newINrw.Strap;      if (readfirstkey("Name",BPIStrapr,1,true)) then begin        newINrw.Strap = BPIStrapr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassStrapEFAfter = res;return;end;globalfunction boolean NewIN2DClassOdourClFAfter(integer wn,integer rownr,integer changed)begin	integer i,mtrw;	record NewINVc newINr;  record BPIOdourVc BPIOdourr;	row NewINVc newINrw;	  boolean res, TrHs;    TrHs = true;		if(changed!=0)then begin		getwindowrecord(wn,newINr);    matrowget(newINr,rownr,newINrw);    BPIOdourr.Code = newINrw.OdourCl;    if (readfirstmain(BPIOdourr,1,true)) then begin      newINrw.OdourCl = BPIOdourr.Code;    end    else begin      BPIOdourr.Name = newINrw.OdourCl;      if (readfirstkey("Name",BPIOdourr,1,true)) then begin        newINrw.OdourCl = BPIOdourr.Code;      end;    end;    matrowput(newINr,rownr,newINrw);		putwindowrecord(wn,newINr);	end;	NewIN2DClassOdourClFAfter = res;return;end;globalfunction boolean NewIN2DClassCodeEFAfter(integer wn,integer rownr,integer changed)begin	integer i,cnt;	record NewINVc newINr;		boolean res;		if(changed>0)then begin		GetWindowRecord(wn,newINr);		if(rownr>-1)then begin			HandleNewIN2DClassCode(newINr,rownr);		end;		PutWindowRecord(wn,newINr);	end;  NewIN2DClassCodeEFAfter = res;  return;end;globalfunction Boolean NewINDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  res = true;  switch (fieldname) begin    case "Code": res = NewINDClassmCodeEFAfter(wn,rownr,changed); //Edit***************************Sasha2,12:00 16.12.2015    case "Name": res = NewINDClassmNameEFAfter(wn,rownr,changed);  end;  NewINDClassAfterEditField = res;  RETURN;END;globalfunction Boolean NewIN2DClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  res = true;  switch (fieldname) begin    case "Code": res = NewIN2DClassCodeEFAfter(wn,rownr,changed);    case "Brand": res = NewIN2DClassBrandEFAfter(wn,changed);    case "BrandSC": res = NewIN2DClassBrandSCEFAfter(wn,rownr,changed);    case "Collection": res = NewIN2DClassCollectionEFAfter(wn,rownr,changed);    case "GroupCl": res = NewIN2DClassGroupClEFAfter(wn,rownr,changed);    case "SubGroupCl": res = NewIN2DClassSubGroupClEFAfter(wn,rownr,changed);    case "classif31": res = NewIN2DClassclassif31EFAfter(wn,rownr,changed);    case "Material": res = NewIN2DClassMaterialEFAfter(wn,rownr,changed);    case "Color": res = NewIN2DClassColorEFAfter(wn,rownr,changed);    case "ShapeCut": res = NewIN2DClassShapeCutEFAfter(wn,rownr,changed);    case "SizeCl": res = NewIN2DClassSizeClEFAfter(wn,rownr,changed);    case "UseCl": res = NewIN2DClassUseClEFAfter(wn,rownr,changed);    case "SexCl": res = NewIN2DClassSexClEFAfter(wn,rownr,changed);    case "PlatingCl": res = NewIN2DClassPlatingClEFAfter(wn,rownr,changed);    case "ClaritySC": res = NewIN2DClassClaritySCEFAfter(wn,rownr,changed);    case "WeightCl": res = NewIN2DClassWeightClEFAfter(wn,rownr,changed);    case "CutCl": res = NewIN2DClassCutClEFAfter(wn,rownr,changed);    case "StoneCl": res = NewIN2DClassStoneClEFAfter(wn,rownr,changed);    case "Strap": res = NewIN2DClassStrapEFAfter(wn,rownr,changed);     case "OdourCl": res = NewIN2DClassOdourClFAfter(wn,rownr,changed);  end;  NewIN2DClassAfterEditField = res;  RETURN;END;globalfunction Boolean NewINDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)begin	record NewINVc newINr;	boolean res;		res = true;		getwindowrecord(wn,newINr);		if(newINr.OKFlag==1)then begin		res = false;		if(fieldname=="OKFlag")then begin			res = true;		end;	end;		NewINDClassActiveEditField = res;	return;end;global updating procedure ExportINToOthDsm()beginrecord NewINVc newINr;record NewINVc OthCompnewINr;integer wn;wn=CurWindow;GetWindowRecord(wn,newINr);	if(CurrentCompany == 4) then begin		SetCompany(25,false);		RecordNew(OthCompnewINr);		RecordCopy(OthCompnewINr,newINr);		OthCompnewINr.SerNr = NextSerNr("NewINVc",currentdate,-1,false,""); 			OthCompnewINr.OKFlag=0;		RecordStore(OthCompnewINr,true);	end else begin 		SetCompany(4,false);		RecordNew(OthCompnewINr);		RecordCopy(OthCompnewINr,newINr);		OthCompnewINr.SerNr = NextSerNr("NewINVc",currentdate,-1,false,""); 			OthCompnewINr.OKFlag=0;		RecordStore(OthCompnewINr,true);	end;	return;end;