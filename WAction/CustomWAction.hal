external procedure ExtractObj(string,var Integer,var string);
remote updating procedure R_ProceedChangeLoyCard(record RcVc);
external procedure FindRepDefHeader(string,string,var string);

SetLangMode(LangRussian,"RUS",0);


global 
procedure ItemSaldoRClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
	record UserVc User;
	integer i;
	string 20 loc;
	
	getwindowrecord(wn,RepSpec);
	User.Code = currentuser;
	if(readfirstmain(User,1,true))then begin
		if(nonblank(User.UserLocations) and usercanaction("AllowReportWithUserLoc",false))then begin
			i = 0;
			ExtractObj(User.UserLocations,i,loc);
			RepSpec.f1 = loc;
			putwindowrecord(wn,RepSpec);
		end;
	end;
return;
end;


global
procedure PecuniaryRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PecuniaryRClass");  
  RepSpec.d1 = CurrentDate;
  RepSpec.f2 = LMb.DefLocation;
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;


global
procedure PecuniaryTestRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PecuniaryRClass");  
  RepSpec.d1 = CurrentDate;
  RepSpec.f2 = LMb.DefLocation;
  RepSpec.f1 = LMb.LocalMachineCode;
  RepSpec.flags[29] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

global 
procedure LoopNCSR(var record INVc INr)
begin
	Boolean res,testf;
	record NewClassSetVc NCSr;
	record BPISubGroupVc BPISubGroupr;
	row NewClassSetVc NCSrw;
	integer i;
	vector string 100 vtype;
	NCSr.Group="";
		while(LoopMain(NCSr,1,true)) begin
		  testf=true;
			if(NCSr.Type!=INr.BPISubGroup) then begin testf=false; end;
			if (testf) then begin
				for(i=0;i<matrowcnt(NCSr);i=i+1) begin
					matrowget(NCSr,i,NCSrw);
					vtype[NCSrw.CTypeName]="*";
				end;
				logtext(0,NCSr.Type);
				INr.BPICategory = vtype["Category"]; 
				INr.BPIMaterial = vtype["Material"];
			  INr.BPIColor = vtype["Color"];
				INr.BPIShape = vtype["Shape"];
				INr.BPISize = vtype["Size"];
				INr.BPIUse = vtype["Use"];
				INr.BPISex = vtype["Sex"];
				INr.BPIPlating = vtype["Plating"];
				INr.BPIClarity = vtype["Clarity"];
				INr.BPIWeight = vtype["Weigh"];
				INr.BPICut = vtype["Cut"];
				INr.BPIStone = vtype["Stone"];
				INr.BPIStrap = vtype["Strap"];
				INr.BPIOdour = vtype["Odour"];
			end;	
		end;
return;
end;

global
procedure SaleReportRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SaleReportRClass");  
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

global
procedure SalesReportExtRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SalesReportExtRClass");  
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

procedure INConsDClasspateCode(integer wn, integer changed)
begin
	record INConsVc INCr;
	record INVc INr;
	
	if(changed>0)then begin
		getwindowrecord(wn,INCr);
		INr.Code = INCr.Code;
		if(readfirstmain(INr,1,true))then begin
			INCr.Name = INr.Name;
			putwindowrecord(wn,INCr);
		end;
	end;
	
return
end;

global
function Boolean INConsDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  switch (fieldname) begin
  	case "Code": INConsDClasspateCode(wn,changed);
  end;
  
return;
end;

global 
procedure ExportRegIVDsm()
begin
	record IVVc IVr;
	integer wn;
	area arec;
	
	setareazerosize(arec);
	wn = curwindow;
	if(fileexists("IVBack/IV.txt"))then begin
	end else begin
		createfile("IVBack/IV.txt");
		closefile;
	end;
	getwindowrecord(wn,IVr);
	addrecordtoarea(IVr,"IVVc",arec);
	writeareatofile(arec,"IVBack/IV.txt",1);
	NewLine;
	
	
return;
end;


global 
procedure ChangeLoyaltyCardDsm()
begin
	record IVVc IVr;
	record RcVc RepSpec;
	integer wn;
	area arec;
	
	wn = curwindow;
	getwindowrecord(wn,IVr);
	if(nonblank(IVr.CustCode) and IVr.CustCode!="NONAME")then begin
		RepSpec.f4 = IVr.CustCode;
	end;
	if(nonblank(IVr.LoyaltyCardNr))then begin
		RepSpec.f1 = IVr.LoyaltyCardNr;
	end;
	
	OpenWindow("ChangeLoyCardDClass",0,0,"","",RepSpec);
		
return;
end;

global 
updating procedure ProceedChangeLoyCard()
begin
	record IVVc IVr;
	record RcVc RepSpec;
	integer wn;
	boolean testf;
	record LoyaltyCardVc LoyaltyCardr;

	testf = true;
	wn = curwindow;
	deselectwindow(wn,true);
	getwindowrecord(wn,RepSpec);
	
	if(RepSpec.flags[0]==0)then begin
		messagebox(0,"Укажите причину выдачи карты");
		testf = false;
	end;
	if(blank(RepSpec.f2))then begin
		messagebox(0,"Укажите новый штрихкод карты");
		testf = false;
	end;
	if(RepSpec.flags[0]==1 and blank(RepSpec.f1))then begin
		messagebox(0,"Укажите старый штрихкод карты");
		testf = false;
	end;
	if(blank(RepSpec.f4))then begin
		messagebox(0,"Укажите ID клиента, которому выдается новая карта");
		testf = false;
	end;
	
	if(blank(RepSpec.f3))then begin
		messagebox(0,"Укажите код сотрудника выполнявшего выдачу");
		testf = false;
	end;
	
	if(nonblank(RepSpec.f2))then begin
		LoyaltyCardr.SerNr = RepSpec.f2;
		if(readfirstmain(LoyaltyCardr,1,true))then begin
			messagebox(0,"Карта лояльности с таким штрих-кодом уже зарегестрирована!");
			testf = false;
		end;
	end;
	
	if(testf)then begin
		R_ProceedChangeLoyCard(RepSpec);
		closewindow(wn);
	end;
		
return;
end;


global 
updating procedure OrderStatusInfoMn()
begin
	integer wn,nwn;
	record RcVc RepSpec;

	nwn = OpenWindow("OrderStatusInfoAClass",0,0,"","",RepSpec);

  return;
end;

global
function Boolean ChangeLoyCardDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record LoyaltyCardVc LoyaltyCardr;
	record RcVc RepSpec;
	
  switch (fieldname) begin
    case "f1": 	getwindowrecord(wn,RepSpec);
    						LoyaltyCardr.SerNr = RepSpec.f1;
    						if(readfirstmain(LoyaltyCardr,1,true))then begin
    							if(nonblank(LoyaltyCardr.CustCode))then begin
    								RepSpec.f4 = LoyaltyCardr.CustCode;
    								putwindowrecord(wn,RepSpec);
    							end;
    						end else begin
    							messagebox(0,"Номер карты указан неверно");
    						end;
    
  end;
  ChangeLoyCardDClassAfterEditField = true;
  return;
end;

global 
 procedure GlobResRClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ResRClass");  
  //FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
	RepSpec.Comparison = 1;
	RepSpec.AccSpec = 1;
	RepSpec.f10 = "1";
  RepSpec.flags[1] = 1;
  RepSpec.Stext = RepSpec.Period2Str;
  RepSpec.AccSpec = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
return;
end;
