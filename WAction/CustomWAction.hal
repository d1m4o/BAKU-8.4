external procedure ExtractObj(string,var Integer,var string);
remote updating procedure R_ProceedChangeLoyCard(record RcVc);
external procedure FindRepDefHeader(string,string,var string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean BPUVc_PasteArtCode(var record BigPUVc,Integer,var string,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function roundmode SetRoundModeD(Integer);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
remote procedure PUDClassWeightRow(var record BigPUVc,integer); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:06 22.07.2019
remote procedure PUDClassCaratRow(var record BigPUVc,integer); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:06 22.07.2019
remote procedure BigPUSumUp(var record BigPUVc); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:38 22.07.2019


SetLangMode(LangRussian,"RUS",0);


global 
procedure ItemSaldoRClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
	record UserVc User;
	integer i;
	string 20 loc;
	
	getwindowrecord(wn,RepSpec);
	User.Code = currentuser;
	if(readfirstmain(User,1,true))then begin
		if(nonblank(User.UserLocations) and usercanaction("AllowReportWithUserLoc",false))then begin
			i = 0;
			ExtractObj(User.UserLocations,i,loc);
			RepSpec.f1 = loc;
			putwindowrecord(wn,RepSpec);
		end;
	end;
return;
end;


global
procedure PecuniaryRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PecuniaryRClass");  
  RepSpec.d1 = CurrentDate;
  RepSpec.f2 = LMb.DefLocation;
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;


global
procedure PecuniaryTestRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PecuniaryRClass");  
  RepSpec.d1 = CurrentDate;
  RepSpec.f2 = LMb.DefLocation;
  RepSpec.f1 = LMb.LocalMachineCode;
  RepSpec.flags[29] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

global 
procedure LoopNCSR(var record INVc INr)
begin
	Boolean res,testf;
	record NewClassSetVc NCSr;
	record BPISubGroupVc BPISubGroupr;
	row NewClassSetVc NCSrw;
	integer i;
	vector string 100 vtype;
	NCSr.Group="";
		while(LoopMain(NCSr,1,true)) begin
		  testf=true;
			if(NCSr.Type!=INr.BPISubGroup) then begin testf=false; end;
			if (testf) then begin
				for(i=0;i<matrowcnt(NCSr);i=i+1) begin
					matrowget(NCSr,i,NCSrw);
					vtype[NCSrw.CTypeName]="*";
				end;
				logtext(0,NCSr.Type);
				INr.BPICategory = vtype["Category"]; 
				INr.BPIMaterial = vtype["Material"];
			  INr.BPIColor = vtype["Color"];
				INr.BPIShape = vtype["Shape"];
				INr.BPISize = vtype["Size"];
				INr.BPIUse = vtype["Use"];
				INr.BPISex = vtype["Sex"];
				INr.BPIPlating = vtype["Plating"];
				INr.BPIClarity = vtype["Clarity"];
				INr.BPIWeight = vtype["Weigh"];
				INr.BPICut = vtype["Cut"];
				INr.BPIStone = vtype["Stone"];
				INr.BPIStrap = vtype["Strap"];
				INr.BPIOdour = vtype["Odour"];
			end;	
		end;
return;
end;

global
procedure SaleReportRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SaleReportRClass");  
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

global
procedure SalesReportExtRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SalesReportExtRClass");  
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

procedure INConsDClasspateCode(integer wn, integer changed)
begin
	record INConsVc INCr;
	record INVc INr;
	
	if(changed>0)then begin
		getwindowrecord(wn,INCr);
		INr.Code = INCr.Code;
		if(readfirstmain(INr,1,true))then begin
			INCr.Name = INr.Name;
			putwindowrecord(wn,INCr);
		end;
	end;
	
return
end;

global
function Boolean INConsDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  switch (fieldname) begin
  	case "Code": INConsDClasspateCode(wn,changed);
  end;
  
return;
end;

global 
procedure ExportRegIVDsm()
begin
	record IVVc IVr;
	integer wn;
	area arec;
	
	setareazerosize(arec);
	wn = curwindow;
	if(fileexists("IVBack/IV.txt"))then begin
	end else begin
		createfile("IVBack/IV.txt");
		closefile;
	end;
	getwindowrecord(wn,IVr);
	addrecordtoarea(IVr,"IVVc",arec);
	writeareatofile(arec,"IVBack/IV.txt",1);
	NewLine;
	
	
return;
end;


global 
procedure ChangeLoyaltyCardDsm()
begin
	record IVVc IVr;
	record RcVc RepSpec;
	integer wn;
	area arec;
	
	wn = curwindow;
	getwindowrecord(wn,IVr);
	if(nonblank(IVr.CustCode) and IVr.CustCode!="NONAME")then begin
		RepSpec.f4 = IVr.CustCode;
	end;
	if(nonblank(IVr.LoyaltyCardNr))then begin
		RepSpec.f1 = IVr.LoyaltyCardNr;
	end;
	
	OpenWindow("ChangeLoyCardDClass",0,0,"","",RepSpec);
		
return;
end;

global 
updating procedure ProceedChangeLoyCard()
begin
	record IVVc IVr;
	record RcVc RepSpec;
	integer wn;
	boolean testf;
	record LoyaltyCardVc LoyaltyCardr;

	testf = true;
	wn = curwindow;
	deselectwindow(wn,true);
	getwindowrecord(wn,RepSpec);
	
	if(RepSpec.flags[0]==0)then begin
		messagebox(0,"Укажите причину выдачи карты");
		testf = false;
	end;
	if(blank(RepSpec.f2))then begin
		messagebox(0,"Укажите новый штрихкод карты");
		testf = false;
	end;
	if(RepSpec.flags[0]==1 and blank(RepSpec.f1))then begin
		messagebox(0,"Укажите старый штрихкод карты");
		testf = false;
	end;
	if(blank(RepSpec.f4))then begin
		messagebox(0,"Укажите ID клиента, которому выдается новая карта");
		testf = false;
	end;
	
	if(blank(RepSpec.f3))then begin
		messagebox(0,"Укажите код сотрудника выполнявшего выдачу");
		testf = false;
	end;
	
	if(nonblank(RepSpec.f2))then begin
		LoyaltyCardr.SerNr = RepSpec.f2;
		if(readfirstmain(LoyaltyCardr,1,true))then begin
			messagebox(0,"Карта лояльности с таким штрих-кодом уже зарегестрирована!");
			testf = false;
		end;
	end;
	
	if(testf)then begin
		R_ProceedChangeLoyCard(RepSpec);
		closewindow(wn);
	end;
		
return;
end;

global 
function Boolean BPUDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  record INVc INr;
  GetWindowRecord(wn,BPUr);
  MatRowGet(BPUr,rownr,BPUrw);    
	INr.Code = BPUrw.ArtCode;
		if(ReadFirstMain(INr,1,true)) then begin BPUrw.Spec = INr.Name; end;
	MatRowPut(BPUr,rownr,BPUrw); 	
  PutWindowRecord(wn,BPUr);     
  BPUDClassArtCodeEFAfter = true;
  return;
end;

global 
function Boolean BPUDClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  record INVc INr;
	if(changedf) then begin
		GetWindowRecord(wn,BPUr);
		MatRowGet(BPUr,rownr,BPUrw);    
		BPUrw.Sum = BPUrw.Quant * BPUrw.UPrice;
		MatRowPut(BPUr,rownr,BPUrw); 	
		PutWindowRecord(wn,BPUr);    
	end;	
  BPUDClassQuantEFAfter = true;
  return;
end;

function Boolean BPUDClassShipCostEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  integer i;
	val total;
	val FInBase;
  
	total = 0;
	GetWindowRecord(wn,BPUr);
	for(i=0;i<matrowcnt(BPUr);i=i+1) begin
		MatRowGet(BPUr,i,BPUrw);
		total = total + BPUrw.Quant * BPUrw.CostPrice;
	end;
	if(nonblank(BPUr.CurrencyF)) then begin
		FInBase = MulRateToBase1(BPUr.CurrencyF,BPUr.ShipCost,BPUr.FrRateF,BPUr.ToRateF,BPUr.ToRateF,BPUr.FrRateF,BPUr.ToRateF,SetROundModeD(2));
	end else begin 	FInBase = BPUr.ShipCost; end;
	for(i=0;i<matrowcnt(BPUr);i=i+1) begin
		MatRowGet(BPUr,i,BPUrw);
		BPUrw.ShipCost = FInBase * (BPUrw.Quant * BPUrw.CostPrice/total);
		MatRowPut(BPUr,i,BPUrw);
	end;
	PutWindowRecord(wn,BPUr);     
  BPUDClassShipCostEFAfter = true;
  return;
end;

global 
function Boolean BPUDClassCustomsCostEFAfter(Integer wn,boolean changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  integer i;
	val total;
	val FInBase;
	record ConsCompBlock CCBb;
	
	BlockLoad(CCBb);
	
  if(changedf) then begin
		GetWindowRecord(wn,BPUr);
		for(i=0;i<matrowcnt(BPUr);i=i+1) begin
			MatRowGet(BPUr,i,BPUrw);
			total = total + BPUrw.Quant * BPUrw.CostPrice;
		end;
		if(nonblank(BPUr.CurrencyT)) then begin
			FInBase = MulRateToBase1(BPUr.CurrencyT,BPUr.CustomsCost,BPUr.FrRateT,BPUr.ToRateT,BPUr.ToRateT,BPUr.FrRateT,BPUr.ToRateT,SetROundModeD(2));
		end else begin 	FInBase = BPUr.CustomsCost; end;
		for(i=0;i<matrowcnt(BPUr);i=i+1) begin
			if(CCBb.ConsAddShipCost==1 and BPUr.ConsManualCost==0)then begin
				MatRowGet(BPUr,i,BPUrw);
				BPUrw.CustomsCost = FInBase * (BPUrw.Quant * BPUrw.CostPrice/total);
				MatRowPut(BPUr,i,BPUrw);
			end else begin
				MatRowGet(BPUr,i,BPUrw);
				BPUrw.CustomsCost = FInBase * (BPUrw.Quant * BPUrw.CostPrice/total);
				MatRowPut(BPUr,i,BPUrw);
			end;
		end;
		PutWindowRecord(wn,BPUr);   
	end;	
  BPUDClassCustomsCostEFAfter = true;
  return;
end;

global 
function Boolean BPUDClassCurrencyFEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
val fr,to1,to2,br1,br2;
record BigPUVc BPUr;

  row BigPUVc BPUrw;
	GetWindowRecord(wn,BPUr);
	GetFullCurncyRate(BPUr.CurrencyF,CurrentDate,fr,to1,to2,br1,br2);
	BPUr.FrRateF = fr;
	BPUr.ToRateF = to1;
	PutWindowRecord(wn,BPUr);
	BPUDClassShipCostEFAfter(wn,fn,rownr,changedf);
	BPUDClassCurrencyFEFAfter = true;
return;
end;

global 
function Boolean BPUDClassCurrencyTEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
val fr,to1,to2,br1,br2;
record BigPUVc BPUr;

  row BigPUVc BPUrw;
	GetWindowRecord(wn,BPUr);
	GetFullCurncyRate(BPUr.CurrencyT,CurrentDate,fr,to1,to2,br1,br2);
	BPUr.FrRateT = fr;
	BPUr.ToRateT = to1;
	PutWindowRecord(wn,BPUr);
	BPUDClassCustomsCostEFAfter(wn,true);
	BPUDClassCurrencyTEFAfter = true;
return;
end;

global 
function Boolean BPUDClassFromOrdsEFAfter(Integer wn,Integer fn,Integer changedf)
begin
record BigPUVc BPUr;
integer pos;
string 255 obj,set;
vector boolean used;
getwindowrecord(wn,BPUr);
pos = 0;
obj = "";
set = "";
ExtractObj(BPUr.FromOrds,pos,obj);
while(nonblank(obj)) begin
	if(nonblank(set)) then begin
		set = set & ",";
	end;
	if(!used[obj]) then begin
		set = set & obj;
		used[obj] = true;
	end else begin
		messagebox(0,obj & " Уже был записан");
		set = Left(set,len(set)-1);
	end;	
	ExtractObj(BPUr.FromOrds,pos,obj);
end;
BPUr.FromOrds = set;
PutWindowRecord(wn,BPUr);
BPUDClassFromOrdsEFAfter = true;
return;
end;




global 
function Boolean PUDClassWeightRowEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf,integer column)
begin
  Boolean chsum,chrsum;
  record BigPUVc PUr;
  row BigPUVc PUrw;
  val p,s;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
		PUDClassWeightRow(PUr,rownr);
    BigPUSumUp(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassWeightRowEFAfter = true;
  return;
end;



global 
function Boolean PUDClassCaratRowEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf,integer column)
begin
  Boolean chsum,chrsum;
  record BigPUVc PUr;
  row BigPUVc PUrw;
  val p,s;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
		PUDClassCaratRow(PUr,rownr);
    BigPUSumUp(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCaratRowEFAfter = true;
  return;
end;


global 
function Boolean PUDClassCaratplacerRowEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf,integer column)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
		PUDClassCaratRow(PUr,rownr);
    BigPUSumUp(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCaratplacerRowEFAfter = true;
  return;
end;



global
function Boolean BigPUDClassConsManualCostButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record BigPUVc BigPUr;
  row BigPUVc BigPUrw;
  record POSettingBlock POSb;
  Integer err,i,mtrw;
	Integer fn, rownr,changed;
  
  res = true;
 	
 	getwindowrecord(wn,BigPUr);
 	res = BPUDClassCustomsCostEFAfter(wn,true);
  
LPODClassOKFlagButtonAction:;   
  BigPUDClassConsManualCostButtonAction = res;
  RETURN;
END;



global
updating function Boolean BigPUDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    
    case "ArtCode": res = BPUDClassArtCodeEFAfter(wn,fn,rownr,changed);
		case "ShipCost": res = BPUDClassShipCostEFAfter(wn,fn,rownr,changed);
		case "CustomsCost": res = BPUDClassCustomsCostEFAfter(wn,changed);
		case "CurrencyF": res = BPUDClassCurrencyFEFAfter(wn,fn,rownr,changed);
		case "CurrencyT": res = BPUDClassCurrencyTEFAfter(wn,fn,rownr,changed);
		case "WeightRow": res = PUDClassWeightRowEFAfter(wn,fn,rownr,changed,4);
    case "CaratRow": res = PUDClassCaratRowEFAfter(wn,fn,rownr,changed,5);
		case "CaratplacerRow": res = PUDClassCaratRowEFAfter(wn,fn,rownr,changed,5);
		case "FromOrds": res = BPUDClassFromOrdsEFAfter(wn,fn,changed);
		case "ToRateF": res = BPUDClassShipCostEFAfter(wn,fn,rownr,changed);
		case "ToRateT": res = BPUDClassCustomsCostEFAfter(wn,changed);
		case "Quant": res = BPUDClassQuantEFAfter(wn,fn,rownr,changed);
  end;
  BigPUDClassAfterEditField = res;
  RETURN;
END;

global 
updating procedure CollectItemsFromOrd()
begin
record BigPUVc BPUr;
row BigPUVc BPUrw;
integer wn,i,j,BProw,cnt;
string 255 ordNr;
record POVc POr;
row POVc POrw;
record BPIBrandVc BBr;
record ConsCompBlock CCB;
record INVc INr;
record PosVc Posr;	
	BlockLoad(CCB);

	wn = curwindow;
	BProw = 0;
	DeselectWindow(wn,true);
	getwindowrecord(wn,BPUr);
	cnt = matrowcnt(BPUr);
	for(j=cnt;j>=0;j=j-1) begin
		MatRowDelete(BPUr,j);
	end;	
	i=0;
	ExtractObj(BPUr.FromOrds,i,ordNr);
	while (nonblank(ordNr)) begin
		POr.SerNr = ordNr;
		if(ReadFirstMain(POr,1,true)) then begin
			for(j=0;j<matrowcnt(POr);j=j+1) begin
			
				matrowget(POr,j,POrw);
				if(POrw.Quant-POrw.Shipd1>0) then begin
					BPUrw.Position = "";
					BPUrw.Location = "";
					if(CCB.OKFlag>0) then begin
						INr.Code = POrw.ArtCode;
						if(readfirstmain(INr,1,true)) then begin
							BBr.Code = INr.BPIBrand;
							if(ReadFirstMain(BBr,1,true)) then begin
								BPUrw.Position = BBr.CWHCode;
								Posr.Code = BBr.CWHCode;
								if(ReadFirstMain(Posr,1,true)) then begin
									BPUrw.Location = Posr.Location;
								end;
							end;
						end;
					end;	
					BPUrw.ArtCode = POrw.ArtCode;
					BPUrw.FromOrdNr = POr.SerNr;
					BPUrw.FromOrdrowNr = j+1;
					BPUrw.Quant = POrw.Quant - POrw.Shipd1;
					BPUrw.UPrice = POrw.Price;
					BPUrw.Sum = POrw.Sum;
					BPUrw.ItemConsgType = POrw.ItemConsgType;
					BPUrw.CurrencyItem = POr.CurncyCode;
					BPUrw.Spec = POrw.Spec;
					BPUrw.WeightRow = POrw.WeightRow;
					BPUrw.CaratRow = POrw.CaratRow;
					BPUrw.CaratplacerRow = POrw.CaratplacerRow;
					BPUrw.CostPrice = MulRateToBase1(POr.CurncyCode,POrw.Price,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,SetROundModeD(3));
					matrowput(BPUr,BProw,BPUrw);
					PUDClassWeightRow(BPUr,BProw);
					PUDClassCaratRow(BPUr,BProw);
					matrowGet(BPUr,BProw,BPUrw);
					matrowput(BPUr,BProw,BPUrw);
					BProw	= BProw + 1;	
				end;	
			end;
		end;
		ExtractObj(BPUr.FromOrds,i,ordNr);
	end;	
	BigPUSumUp(BPUr);
	putwindowrecord(wn,BPUr);	
return;
end;

global 
updating procedure OrderStatusInfoMn()
begin
	integer wn,nwn;
	record RcVc RepSpec;

	nwn = OpenWindow("OrderStatusInfoAClass",0,0,"","",RepSpec);

  return;
end;

global
function Boolean ChangeLoyCardDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record LoyaltyCardVc LoyaltyCardr;
	record RcVc RepSpec;
	
  switch (fieldname) begin
    case "f1": 	getwindowrecord(wn,RepSpec);
    						LoyaltyCardr.SerNr = RepSpec.f1;
    						if(readfirstmain(LoyaltyCardr,1,true))then begin
    							if(nonblank(LoyaltyCardr.CustCode))then begin
    								RepSpec.f4 = LoyaltyCardr.CustCode;
    								putwindowrecord(wn,RepSpec);
    							end;
    						end else begin
    							messagebox(0,"Номер карты указан неверно");
    						end;
    
  end;
  ChangeLoyCardDClassAfterEditField = true;
  return;
end;

global 
 procedure GlobResRClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ResRClass");  
  //FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
	RepSpec.Comparison = 1;
	RepSpec.AccSpec = 1;
	RepSpec.f10 = "1";
  RepSpec.flags[1] = 1;
  RepSpec.Stext = RepSpec.Period2Str;
  RepSpec.AccSpec = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
return;
end;
